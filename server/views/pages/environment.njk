{% extends "../partials/layout.njk" %}

{% set pageTitle = applicationName + " - " + component.name %}
{% set mainClasses = "app-container govuk-body" %}

{% block content %}

<h1 id="detailPageTitle">{{ component.name }} / {{ component.environment.name }}</h1>

<table class="componentData">
  <tbody>
    <tr>
      <th>ID</th>
      <td>{{ component.environment.id }}</td>
    </tr>
    <tr>
      <th>Name</th>
      <td><a href="{{ component.environment.url }}">{{ component.environment.name }}</a></td>
    </tr>
    <tr>
      <th>URL</th>
      <td><a href="{{ component.environment.url }}">{{ component.environment.url }}</a></td>
    </tr>
    <tr>
      <th>Namespace</th>
      <td><a href="https://github.com/ministryofjustice/cloud-platform-environments/tree/main/namespaces/live.cloud-platform.service.justice.gov.uk/{{ component.environment.namespace }}" target="_blank">{{ component.environment.namespace }}</a> (opens in new window)</td>
    </tr>
    <tr>
      <th>Info</th>
      <td>{% if component.environment.info_path|length %}<a href="{{ component.environment.url }}{{ component.environment.info_path }}" target="_blank">{{ component.environment.info_path }}</a> (opens in new window){% endif %}</td>
    </tr>
    <tr>
      <th>Health</th>
      <td>{% if component.environment.health_path|length %}<a href="{{ component.environment.url }}{{ component.environment.health_path }}" target="_blank">{{ component.environment.health_path }}</a> (opens in new window){% endif %}</td>
    </tr>
    <tr>
      <th>Cluster</th>
      <td>{{ component.environment.cluster }}</td>
    </tr>
    <tr>
      <th>Version</th>
      <td id="{{ component.environment.name }}_version"></td>
    </tr>
    <tr>
      <th>Status</th>
      <td id="{{ component.environment.name }}_status"></td>
    </tr>
    <tr>
      <th>Cloud Platform Reports</th>
      <td><a href="https://reports.cloud-platform.service.justice.gov.uk/namespace/{{ component.environment.namespace }}" target="_blank">View</a> (opens in new window)</td>
    </tr>
  </tbody>
</table>

{% endblock %}

{% block bodyEnd %}
  <script src="/assets/govuk/all.js"></script>
  <script src="/assets/govukFrontendInit.js"></script>
  <script src="/assets/moj/all.js"></script>

  <script nonce="{{ cspNonce }}">
    const lastIds = {}
    const data = {}
    lastIds['h:{{ component.environment.name }}'] = '0'
    lastIds['i:{{ component.environment.name }}'] = '0'
    lastIds['v:{{ component.environment.name }}'] = '0'
    data['h:{{ component.environment.name }}'] = ''
    data['i:{{ component.environment.name }}'] = ''
    data['v:{{ component.environment.name }}'] = ''

    const fetchMessages = async (queryStringOptions) => {
      const queryString = new URLSearchParams(queryStringOptions).toString()
      const response = await fetch(`/components/queue/{{ component.id }}/{{ component.environment.name }}/${queryString}`)

      if (!response.ok) {
        throw new Error('There was a problem fetching the component data')
      }

      try {
        const streamJson = await response.json()

        streamJson.forEach(stream => {
          const streamName = stream.name.split(':')
          const streamType = streamName[0].charAt(0)
          const streamKey = `${streamType}:${streamName[2]}`
          const lastMessage = stream.messages[stream.messages.length - 1]

          if (lastIds[streamKey]) {
            lastIds[streamKey] = lastMessage.id
          }

          if (data.hasOwnProperty(streamKey)) {
            data[streamKey] = lastMessage.message

            switch (streamType) {
              case 'v':
                $(`#${streamName[2]}_version`).text(data[streamKey].v)
                break
              case 'h':
                const jsonData = data[streamKey].json
                let status = 'UNK'

                try {
                  health = JSON.parse(jsonData)

                  if (health.hasOwnProperty('status')) {
                    status = health.status
                  } else {
                    status = health.healthy
                  }
                } catch (e) {
                  console.error('Error parsing JSON data')
                  console.error(e)
                }

                $(`#${streamName[2]}_status`).text(status)
                break
            }
          }
        })
      } catch (e) {
        console.error(e)
      }
    }

    const watch = async () => {
      await fetchMessages(lastIds)

      setTimeout(watch, 10000)
    }

    jQuery(function () {
      watch()
    })
  </script>
{% endblock %}
