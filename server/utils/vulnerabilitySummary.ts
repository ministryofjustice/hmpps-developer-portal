import type { Environment } from '../data/strapiApiTypes'
import type { Summary } from '../data/converters/modelTypes'
import type { VeracodeResultsSummary } from '../data/modelTypes'

export const getProductionEnvironment = (envs?: Environment[]): Environment | undefined => {
  return envs?.find(environment => environment.name === 'prod')
}

export const countTrivyHighAndCritical = (summary?: Summary): number => {
  if (!summary) return 0
  const categories: Array<'os-pkgs' | 'lang-pkgs'> = ['os-pkgs', 'lang-pkgs']
  return categories.reduce((accumulated, category) => {
    const data = summary[category]
    if (!data) return accumulated
    const fixed = (data.fixed ?? {}) as Record<string, number>
    const unfixed = (data.unfixed ?? {}) as Record<string, number>
    return accumulated + (fixed.CRITICAL ?? 0) + (fixed.HIGH ?? 0) + (unfixed.CRITICAL ?? 0) + (unfixed.HIGH ?? 0)
  }, 0)
}

export const countVeracodeHighAndVeryHigh = (veracode?: VeracodeResultsSummary): number => {
  if (!veracode) return 0
  return (veracode.severity ?? []).reduce((total, severityLevel) => {
    const increment = severityLevel.category.reduce((inner, cat) => {
      return inner + (cat.severity === 'HIGH' || cat.severity === 'VERY_HIGH' ? cat.count : 0)
    }, 0)
    return total + increment
  }, 0)
}
