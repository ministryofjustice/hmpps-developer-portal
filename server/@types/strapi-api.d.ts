/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/components': {
    get: operations['get/components']
    post: operations['post/components']
  }
  '/components/{id}': {
    get: operations['get/components/{id}']
    put: operations['put/components/{id}']
    delete: operations['delete/components/{id}']
  }
  '/custom-component-views': {
    get: operations['get/custom-component-views']
    post: operations['post/custom-component-views']
  }
  '/custom-component-views/{id}': {
    get: operations['get/custom-component-views/{id}']
    put: operations['put/custom-component-views/{id}']
    delete: operations['delete/custom-component-views/{id}']
  }
  '/github-repo-requests': {
    get: operations['get/github-repo-requests']
    post: operations['post/github-repo-requests']
  }
  '/github-repo-requests/{id}': {
    get: operations['get/github-repo-requests/{id}']
    put: operations['put/github-repo-requests/{id}']
    delete: operations['delete/github-repo-requests/{id}']
  }
  '/namespaces': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/namespaces']
    put?: never
    post: operations['post/namespaces']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/namespaces/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/namespaces/{id}']
    put: operations['put/namespaces/{id}']
    post?: never
    delete: operations['delete/namespaces/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/products': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/products']
    put?: never
    post: operations['post/products']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/products/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/products/{id}']
    put: operations['put/products/{id}']
    post?: never
    delete: operations['delete/products/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/product-sets': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/product-sets']
    put?: never
    post: operations['post/product-sets']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/product-sets/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/product-sets/{id}']
    put: operations['put/product-sets/{id}']
    post?: never
    delete: operations['delete/product-sets/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/service-areas': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/service-areas']
    put?: never
    post: operations['post/service-areas']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/service-areas/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/service-areas/{id}']
    put: operations['put/service-areas/{id}']
    post?: never
    delete: operations['delete/service-areas/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/teams': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/teams']
    put?: never
    post: operations['post/teams']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/teams/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/teams/{id}']
    put: operations['put/teams/{id}']
    post?: never
    delete: operations['delete/teams/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/upload': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Upload files */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      /** @description Upload files */
      requestBody: {
        content: {
          'multipart/form-data': {
            /** @description The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3). */
            path?: string
            /** @description The ID of the entry which the file(s) will be linked to */
            refId?: string
            /** @description The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant). */
            ref?: string
            /** @description The field of the entry which the file(s) will be precisely linked to. */
            field?: string
            files: string[]
          }
        }
      }
      responses: {
        /** @description response */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UploadFile'][]
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/upload?id={id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Upload file information */
    post: {
      parameters: {
        query: {
          /** @description File id */
          id: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      /** @description Upload files */
      requestBody: {
        content: {
          'multipart/form-data': {
            fileInfo?: {
              name?: string
              alternativeText?: string
              caption?: string
            }
            /** Format: binary */
            files?: string
          }
        }
      }
      responses: {
        /** @description response */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UploadFile'][]
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/upload/files': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Get a list of files */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UploadFile'][]
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/upload/files/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Get a specific file */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UploadFile']
          }
        }
      }
    }
    put?: never
    post?: never
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Delete a file */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UploadFile']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/connect/{provider}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Login with a provider
     * @description Redirects to provider login before being redirect to /auth/{provider}/callback
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Provider name */
          provider: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Redirect response */
        301: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/local': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Local login
     * @description Returns a jwt token and user info
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "identifier": "foobar",
           *       "password": "Test1234"
           *     } */
          'application/json': {
            identifier?: string
            password?: string
          }
        }
      }
      responses: {
        /** @description Connection */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-UserRegistration']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/local/register': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Register a user
     * @description Returns a jwt token and user info
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "username": "foobar",
           *       "email": "foo.bar@strapi.io",
           *       "password": "Test1234"
           *     } */
          'application/json': {
            username?: string
            email?: string
            password?: string
          }
        }
      }
      responses: {
        /** @description Successful registration */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-UserRegistration']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/{provider}/callback': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Default Callback from provider auth */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Provider name */
          provider: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-UserRegistration']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/forgot-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Send rest password email */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "email": "foo.bar@strapi.io"
           *     } */
          'application/json': {
            email?: string
          }
        }
      }
      responses: {
        /** @description Returns ok */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {string} */
              ok?: true
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/reset-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Rest user password */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "password": "Test1234",
           *       "passwordConfirmation": "Test1234",
           *       "code": "zertyoaizndoianzodianzdonaizdoinaozdnia"
           *     } */
          'application/json': {
            password?: string
            passwordConfirmation?: string
            code?: string
          }
        }
      }
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-UserRegistration']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/change-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Update user's own password */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            password: string
            currentPassword: string
            passwordConfirmation: string
          }
        }
      }
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-UserRegistration']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/email-confirmation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Confirm user email */
    get: {
      parameters: {
        query?: {
          /** @description confirmation token received by email */
          confirmation?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Redirects to the configure email confirmation redirect url */
        301: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/send-email-confirmation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Send confirmation email */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            email?: string
          }
        }
      }
      responses: {
        /** @description Returns email and boolean to confirm email was sent */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              email?: string
              /** @enum {string} */
              sent?: true
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users-permissions/permissions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get default generated permissions */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns the permissions tree */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              permissions?: components['schemas']['Users-Permissions-PermissionsTree']
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users-permissions/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List roles */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns list of roles */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              roles?: (components['schemas']['Users-Permissions-Role'] & {
                nb_users?: number
              })[]
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    /** Create a role */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: components['requestBodies']['Users-Permissions-RoleRequest']
      responses: {
        /** @description Returns ok if the role was create */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {string} */
              ok?: true
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users-permissions/roles/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a role */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description role Id */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns the role */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              role?: components['schemas']['Users-Permissions-Role']
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users-permissions/roles/{role}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update a role */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description role Id */
          role: string
        }
        cookie?: never
      }
      requestBody: components['requestBodies']['Users-Permissions-RoleRequest']
      responses: {
        /** @description Returns ok if the role was udpated */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {string} */
              ok?: true
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    post?: never
    /** Delete a role */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description role Id */
          role: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns ok if the role was delete */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {string} */
              ok?: true
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get list of users */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns an array of users */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-User'][]
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    /** Create a user */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "username": "foo",
           *       "email": "foo@strapi.io",
           *       "password": "foo-password"
           *     } */
          'application/json': {
            email: string
            username: string
            password: string
          }
        }
      }
      responses: {
        /** @description Returns created user info */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-User'] & {
              role?: components['schemas']['Users-Permissions-Role']
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a user */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description user Id */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns a user */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-User']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    /** Update a user */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description user Id */
          id: string
        }
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "username": "foo",
           *       "email": "foo@strapi.io",
           *       "password": "foo-password"
           *     } */
          'application/json': {
            email: string
            username: string
            password: string
          }
        }
      }
      responses: {
        /** @description Returns updated user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-User'] & {
              role?: components['schemas']['Users-Permissions-Role']
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    post?: never
    /** Delete a user */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description user Id */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns deleted user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-User']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get authenticated user info */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-User']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get user count */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns a number */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': number
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    Error: {
      data?: (Record<string, never> | Record<string, never>[]) | null
      error: {
        status?: number
        name?: string
        message?: string
        details?: Record<string, never>
      }
    }
    ComponentRequest: {
      data: {
        name: string
        title?: string
        description?: string
        environments?: components['schemas']['PropertiesEnvironmentComponent'][]
        github_template_repo?: string
        github_only?: boolean
        jira_project_keys?: unknown
        github_project_teams_write?: unknown
        github_project_teams_admin?: unknown
        github_project_branch_protection_restricted_teams?: unknown
        /** @enum {string} */
        github_project_visibility?: 'public' | 'internal' | 'private'
        /** @example string or id */
        product?: number | string
        alerts_prod_slack_channel?: string
        alerts_nonprod_slack_channel?: string
        app_insights_cloud_role_name?: string
        api?: boolean
        frontend?: boolean
        part_of_monorepo?: boolean
        github_repo?: string
        language?: string
        github_project_teams_maintain?: unknown
        github_topics?: unknown
        versions?: unknown
        container_image?: string
        veracode_results_url?: string
        veracode_last_completed_scan_date?: string
        veracode_results_summary?: unknown
        veracode_exempt?: boolean
        veracode_policy_rules_status?: string
        trivy_last_completed_scan_date?: string
        trivy_scan_summary?: unknown
        path_to_project?: string
        path_to_helm_dir?: string
        github_repo_is_template?: boolean
      }
    }
    ComponentListResponseDataItem: {
      id?: number
      attributes?: components['schemas']['Component']
    }
    ComponentListResponse: {
      data?: components['schemas']['ComponentListResponseDataItem'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    Component: {
      name: string
      title?: string
      description?: string
      environments?: components['schemas']['PropertiesEnvironmentComponent'][]
      github_template_repo?: string
      github_only?: boolean
      jira_project_keys?: unknown
      github_project_teams_write?: unknown
      github_project_teams_admin?: unknown
      github_project_branch_protection_restricted_teams?: unknown
      /** @enum {string} */
      github_project_visibility?: 'public' | 'internal' | 'private'
      product?: {
        data?: {
          id?: number
          attributes?: {
            name?: string
            subproduct?: boolean
            parent?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            children?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }[]
            }
            legacy?: boolean
            description?: string
            team?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  products?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  t_id?: string
                  slack_channel_id?: string
                  slack_channel_name?: string
                  slug?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            phase?: string
            product_set?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  products?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  ps_id?: string
                  slug?: string
                  lead_developer?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            delivery_manager?: string
            product_manager?: string
            confluence_link?: string
            gdrive_link?: string
            service_area?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  owner?: string
                  products?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  sa_id?: string
                  slug?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            components?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  title?: string
                  description?: string
                  environments?: {
                    id?: number
                    /** @enum {string} */
                    type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
                    namespace?: string
                    info_path?: string
                    health_path?: string
                    url?: string
                    cluster?: string
                    name?: string
                    monitor?: boolean
                    active_agencies?: unknown
                    swagger_docs?: string
                    ip_allow_list_enabled?: boolean
                    ip_allow_list?: unknown
                    include_in_subject_access_requests?: boolean
                    ns?: {
                      data?: {
                        id?: number
                        attributes?: Record<string, never>
                      }
                    }
                    modsecurity_enabled?: boolean
                    modsecurity_audit_enabled?: boolean
                    modsecurity_snippet?: string
                    build_image_tag?: string
                  }[]
                  github_template_repo?: string
                  github_only?: boolean
                  jira_project_keys?: unknown
                  github_project_teams_write?: unknown
                  github_project_teams_admin?: unknown
                  github_project_branch_protection_restricted_teams?: unknown
                  /** @enum {string} */
                  github_project_visibility?: 'public' | 'internal' | 'private'
                  product?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  alerts_prod_slack_channel?: string
                  alerts_nonprod_slack_channel?: string
                  app_insights_cloud_role_name?: string
                  api?: boolean
                  frontend?: boolean
                  part_of_monorepo?: boolean
                  github_repo?: string
                  language?: string
                  github_project_teams_maintain?: unknown
                  github_topics?: unknown
                  versions?: unknown
                  container_image?: string
                  veracode_results_url?: string
                  veracode_last_completed_scan_date?: string
                  veracode_results_summary?: unknown
                  veracode_exempt?: boolean
                  veracode_policy_rules_status?: string
                  trivy_last_completed_scan_date?: string
                  trivy_scan_summary?: unknown
                  path_to_project?: string
                  path_to_helm_dir?: string
                  github_repo_is_template?: boolean
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }[]
            }
            p_id?: string
            slack_channel_id?: string
            slack_channel_name?: string
            alerts_prod_slack_channel?: string
            alerts_nonprod_slack_channel?: string
            slug?: string
            lead_developer?: string
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            updatedAt?: string
            /** Format: date-time */
            publishedAt?: string
            createdBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            updatedBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
          }
        }
      }
      alerts_prod_slack_channel?: string
      alerts_nonprod_slack_channel?: string
      app_insights_cloud_role_name?: string
      api?: boolean
      frontend?: boolean
      part_of_monorepo?: boolean
      github_repo?: string
      language?: string
      github_project_teams_maintain?: unknown
      github_topics?: unknown
      versions?: unknown
      container_image?: string
      veracode_results_url?: string
      veracode_last_completed_scan_date?: string
      veracode_results_summary?: unknown
      veracode_exempt?: boolean
      veracode_policy_rules_status?: string
      trivy_last_completed_scan_date?: string
      trivy_scan_summary?: unknown
      path_to_project?: string
      path_to_helm_dir?: string
      github_repo_is_template?: boolean
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
      /** Format: date-time */
      publishedAt?: string
      createdBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      updatedBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
    }
    ComponentResponseDataObject: {
      id?: number
      attributes?: components['schemas']['Component']
    }
    ComponentResponse: {
      data?: components['schemas']['ComponentResponseDataObject']
      meta?: Record<string, never>
    }
    PropertiesEnvironmentComponent: {
      id?: number
      /** @enum {string} */
      type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
      namespace?: string
      info_path?: string
      health_path?: string
      url?: string
      cluster?: string
      name?: string
      monitor?: boolean
      active_agencies?: unknown
      swagger_docs?: string
      ip_allow_list_enabled?: boolean
      ip_allow_list?: unknown
      include_in_subject_access_requests?: boolean
      ns?: {
        data?: {
          id?: number
          attributes?: {
            name?: string
            rds_instance?: {
              id?: number
              tf_label?: string
              db_instance_class?: string
              db_engine_version?: string
              rds_family?: string
              is_production?: string
              namespace?: string
              environment_name?: string
              application?: string
              tf_filename?: string
              tf_path?: string
              tf_line_start?: number
              tf_line_end?: number
              db_max_allocated_storage?: string
              infrastructure_support?: string
              business_unit?: string
              team_name?: string
              tf_mod_version?: string
              performance_insights_enabled?: boolean
              allow_major_version_upgrade?: boolean
              allow_minor_version_upgrade?: boolean
              deletion_protection?: boolean
              maintenance_window?: string
              backup_window?: string
              db_parameter?: unknown
            }[]
            elasticache_cluster?: {
              id?: number
              application?: string
              business_unit?: string
              engine_version?: string
              environment_name?: string
              infrastructure_support?: string
              is_production?: boolean
              namespace?: string
              node_type?: string
              number_cache_clusters?: number
              parameter_group_name?: string
              team_name?: string
              tf_label?: string
              tf_filename?: string
              tf_path?: string
              tf_line_end?: number
              tf_line_start?: number
              tf_mod_version?: string
            }[]
            pingdom_check?: {
              id?: number
              tf_label?: string
              tf_filename?: string
              tf_path?: string
              tf_line_start?: number
              tf_line_end?: number
              type?: string
              name?: string
              host?: string
              url?: string
              probefilters?: string
              encryption?: boolean
              resolution?: number
              notifywhenbackup?: boolean
              sendnotificationwhendown?: number
              notifyagainevery?: number
              port?: number
              integrationids?: unknown
            }[]
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            updatedAt?: string
            /** Format: date-time */
            publishedAt?: string
            createdBy?: {
              data?: {
                id?: number
                attributes?: {
                  firstname?: string
                  lastname?: string
                  username?: string
                  /** Format: email */
                  email?: string
                  resetPasswordToken?: string
                  registrationToken?: string
                  isActive?: boolean
                  roles?: {
                    data?: {
                      id?: number
                      attributes?: {
                        name?: string
                        code?: string
                        description?: string
                        users?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }[]
                        }
                        permissions?: {
                          data?: {
                            id?: number
                            attributes?: {
                              action?: string
                              actionParameters?: unknown
                              subject?: string
                              properties?: unknown
                              conditions?: unknown
                              role?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                              /** Format: date-time */
                              createdAt?: string
                              /** Format: date-time */
                              updatedAt?: string
                              createdBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                              updatedBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                            }
                          }[]
                        }
                        /** Format: date-time */
                        createdAt?: string
                        /** Format: date-time */
                        updatedAt?: string
                        createdBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        updatedBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                      }
                    }[]
                  }
                  blocked?: boolean
                  preferedLanguage?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            updatedBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
          }
        }
      }
      modsecurity_enabled?: boolean
      modsecurity_audit_enabled?: boolean
      modsecurity_snippet?: string
      build_image_tag?: string
    }
    CustomComponentViewRequest: {
      data: {
        components?: (number | string)[]
        name: string
        slug?: string
      }
    }
    CustomComponentViewListResponseDataItem: {
      id?: number
      attributes?: components['schemas']['CustomComponentView']
    }
    CustomComponentViewListResponse: {
      data?: components['schemas']['CustomComponentViewListResponseDataItem'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    CustomComponentView: {
      components?: {
        data?: {
          id?: number
          attributes?: {
            name?: string
            title?: string
            description?: string
            environments?: {
              id?: number
              /** @enum {string} */
              type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
              namespace?: string
              info_path?: string
              health_path?: string
              url?: string
              cluster?: string
              name?: string
              monitor?: boolean
              active_agencies?: unknown
              swagger_docs?: string
              ip_allow_list_enabled?: boolean
              ip_allow_list?: unknown
              include_in_subject_access_requests?: boolean
              ns?: {
                data?: {
                  id?: number
                  attributes?: {
                    name?: string
                    rds_instance?: {
                      id?: number
                      tf_label?: string
                      db_instance_class?: string
                      db_engine_version?: string
                      rds_family?: string
                      is_production?: string
                      namespace?: string
                      environment_name?: string
                      application?: string
                      tf_filename?: string
                      tf_path?: string
                      tf_line_start?: number
                      tf_line_end?: number
                      db_max_allocated_storage?: string
                      infrastructure_support?: string
                      business_unit?: string
                      team_name?: string
                      tf_mod_version?: string
                      performance_insights_enabled?: boolean
                      allow_major_version_upgrade?: boolean
                      allow_minor_version_upgrade?: boolean
                      deletion_protection?: boolean
                      maintenance_window?: string
                      backup_window?: string
                      db_parameter?: unknown
                    }[]
                    elasticache_cluster?: {
                      id?: number
                      application?: string
                      business_unit?: string
                      engine_version?: string
                      environment_name?: string
                      infrastructure_support?: string
                      is_production?: boolean
                      namespace?: string
                      node_type?: string
                      number_cache_clusters?: number
                      parameter_group_name?: string
                      team_name?: string
                      tf_label?: string
                      tf_filename?: string
                      tf_path?: string
                      tf_line_end?: number
                      tf_line_start?: number
                      tf_mod_version?: string
                    }[]
                    pingdom_check?: {
                      id?: number
                      tf_label?: string
                      tf_filename?: string
                      tf_path?: string
                      tf_line_start?: number
                      tf_line_end?: number
                      type?: string
                      name?: string
                      host?: string
                      url?: string
                      probefilters?: string
                      encryption?: boolean
                      resolution?: number
                      notifywhenbackup?: boolean
                      sendnotificationwhendown?: number
                      notifyagainevery?: number
                      port?: number
                      integrationids?: unknown
                    }[]
                    /** Format: date-time */
                    createdAt?: string
                    /** Format: date-time */
                    updatedAt?: string
                    /** Format: date-time */
                    publishedAt?: string
                    createdBy?: {
                      data?: {
                        id?: number
                        attributes?: {
                          firstname?: string
                          lastname?: string
                          username?: string
                          /** Format: email */
                          email?: string
                          resetPasswordToken?: string
                          registrationToken?: string
                          isActive?: boolean
                          roles?: {
                            data?: {
                              id?: number
                              attributes?: {
                                name?: string
                                code?: string
                                description?: string
                                users?: {
                                  data?: {
                                    id?: number
                                    attributes?: Record<string, never>
                                  }[]
                                }
                                permissions?: {
                                  data?: {
                                    id?: number
                                    attributes?: {
                                      action?: string
                                      actionParameters?: unknown
                                      subject?: string
                                      properties?: unknown
                                      conditions?: unknown
                                      role?: {
                                        data?: {
                                          id?: number
                                          attributes?: Record<string, never>
                                        }
                                      }
                                      /** Format: date-time */
                                      createdAt?: string
                                      /** Format: date-time */
                                      updatedAt?: string
                                      createdBy?: {
                                        data?: {
                                          id?: number
                                          attributes?: Record<string, never>
                                        }
                                      }
                                      updatedBy?: {
                                        data?: {
                                          id?: number
                                          attributes?: Record<string, never>
                                        }
                                      }
                                    }
                                  }[]
                                }
                                /** Format: date-time */
                                createdAt?: string
                                /** Format: date-time */
                                updatedAt?: string
                                createdBy?: {
                                  data?: {
                                    id?: number
                                    attributes?: Record<string, never>
                                  }
                                }
                                updatedBy?: {
                                  data?: {
                                    id?: number
                                    attributes?: Record<string, never>
                                  }
                                }
                              }
                            }[]
                          }
                          blocked?: boolean
                          preferedLanguage?: string
                          /** Format: date-time */
                          createdAt?: string
                          /** Format: date-time */
                          updatedAt?: string
                          createdBy?: {
                            data?: {
                              id?: number
                              attributes?: Record<string, never>
                            }
                          }
                          updatedBy?: {
                            data?: {
                              id?: number
                              attributes?: Record<string, never>
                            }
                          }
                        }
                      }
                    }
                    updatedBy?: {
                      data?: {
                        id?: number
                        attributes?: Record<string, never>
                      }
                    }
                  }
                }
              }
              modsecurity_enabled?: boolean
              modsecurity_audit_enabled?: boolean
              modsecurity_snippet?: string
              build_image_tag?: string
            }[]
            github_template_repo?: string
            github_only?: boolean
            jira_project_keys?: unknown
            github_project_teams_write?: unknown
            github_project_teams_admin?: unknown
            github_project_branch_protection_restricted_teams?: unknown
            /** @enum {string} */
            github_project_visibility?: 'public' | 'internal' | 'private'
            product?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  subproduct?: boolean
                  parent?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  children?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  legacy?: boolean
                  description?: string
                  team?: {
                    data?: {
                      id?: number
                      attributes?: {
                        name?: string
                        products?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }[]
                        }
                        t_id?: string
                        slack_channel_id?: string
                        slack_channel_name?: string
                        slug?: string
                        /** Format: date-time */
                        createdAt?: string
                        /** Format: date-time */
                        updatedAt?: string
                        /** Format: date-time */
                        publishedAt?: string
                        createdBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        updatedBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                      }
                    }
                  }
                  phase?: string
                  product_set?: {
                    data?: {
                      id?: number
                      attributes?: {
                        name?: string
                        products?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }[]
                        }
                        ps_id?: string
                        slug?: string
                        lead_developer?: string
                        /** Format: date-time */
                        createdAt?: string
                        /** Format: date-time */
                        updatedAt?: string
                        /** Format: date-time */
                        publishedAt?: string
                        createdBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        updatedBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                      }
                    }
                  }
                  delivery_manager?: string
                  product_manager?: string
                  confluence_link?: string
                  gdrive_link?: string
                  service_area?: {
                    data?: {
                      id?: number
                      attributes?: {
                        name?: string
                        owner?: string
                        products?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }[]
                        }
                        sa_id?: string
                        slug?: string
                        /** Format: date-time */
                        createdAt?: string
                        /** Format: date-time */
                        updatedAt?: string
                        /** Format: date-time */
                        publishedAt?: string
                        createdBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        updatedBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                      }
                    }
                  }
                  components?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  p_id?: string
                  slack_channel_id?: string
                  slack_channel_name?: string
                  alerts_prod_slack_channel?: string
                  alerts_nonprod_slack_channel?: string
                  slug?: string
                  lead_developer?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            alerts_prod_slack_channel?: string
            alerts_nonprod_slack_channel?: string
            app_insights_cloud_role_name?: string
            api?: boolean
            frontend?: boolean
            part_of_monorepo?: boolean
            github_repo?: string
            language?: string
            github_project_teams_maintain?: unknown
            github_topics?: unknown
            versions?: unknown
            container_image?: string
            veracode_results_url?: string
            veracode_last_completed_scan_date?: string
            veracode_results_summary?: unknown
            veracode_exempt?: boolean
            veracode_policy_rules_status?: string
            trivy_last_completed_scan_date?: string
            trivy_scan_summary?: unknown
            path_to_project?: string
            path_to_helm_dir?: string
            github_repo_is_template?: boolean
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            updatedAt?: string
            /** Format: date-time */
            publishedAt?: string
            createdBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            updatedBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
          }
        }[]
      }
      name: string
      slug?: string
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
      /** Format: date-time */
      publishedAt?: string
      createdBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      updatedBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
    }
    CustomComponentViewResponseDataObject: {
      id?: number
      attributes?: components['schemas']['CustomComponentView']
    }
    CustomComponentViewResponse: {
      data?: components['schemas']['CustomComponentViewResponseDataObject']
      meta?: Record<string, never>
    }
    GithubRepoRequestRequest: {
      data: {
        github_repo?: string
        repo_description?: string
        base_template?: string
        jira_project_keys?: string
        github_project_visibility?: boolean
        product?: string
        github_project_teams_write?: unknown
        github_projects_teams_admin?: unknown
        github_project_branch_protection_restricted_teams?: unknown
        slack_channel_release_notify?: string
        slack_channel_pipeline_notify?: string
        prod_alerts_severity_label?: string
        nonprod_alerts_severity_label?: string
      }
    }
    GithubRepoRequestListResponseDataItem: {
      id?: number
      attributes?: components['schemas']['GithubRepoRequest']
    }
    GithubRepoRequestListResponse: {
      data?: components['schemas']['GithubRepoRequestListResponseDataItem'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    GithubRepoRequest: {
      github_repo?: string
      repo_description?: string
      base_template?: string
      jira_project_keys?: string
      github_project_visibility?: boolean
      product?: string
      github_project_teams_write?: unknown
      github_projects_teams_admin?: unknown
      github_project_branch_protection_restricted_teams?: unknown
      slack_channel_release_notify?: string
      slack_channel_pipeline_notify?: string
      prod_alerts_severity_label?: string
      nonprod_alerts_severity_label?: string
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
      /** Format: date-time */
      publishedAt?: string
      createdBy?: {
        data?: {
          id?: number
          attributes?: {
            firstname?: string
            lastname?: string
            username?: string
            /** Format: email */
            email?: string
            resetPasswordToken?: string
            registrationToken?: string
            isActive?: boolean
            roles?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  code?: string
                  description?: string
                  users?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  permissions?: {
                    data?: {
                      id?: number
                      attributes?: {
                        action?: string
                        actionParameters?: unknown
                        subject?: string
                        properties?: unknown
                        conditions?: unknown
                        role?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        /** Format: date-time */
                        createdAt?: string
                        /** Format: date-time */
                        updatedAt?: string
                        createdBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        updatedBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                      }
                    }[]
                  }
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }[]
            }
            blocked?: boolean
            preferedLanguage?: string
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            updatedAt?: string
            createdBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            updatedBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
          }
        }
      }
      updatedBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
    }
    GithubRepoRequestResponseDataObject: {
      id?: number
      attributes?: components['schemas']['GithubRepoRequest']
    }
    GithubRepoRequestResponse: {
      data?: components['schemas']['GithubRepoRequestResponseDataObject']
      meta?: Record<string, never>
    }
    NamespaceRequest: {
      data: {
        name: string
        rds_instance?: components['schemas']['TfModulesRdsInstanceComponent'][]
        elasticache_cluster?: components['schemas']['TfModulesElasticacheClusterComponent'][]
        pingdom_check?: components['schemas']['TfModulesPingdomCheckComponent'][]
      }
    }
    NamespaceListResponseDataItem: {
      id?: number
      attributes?: components['schemas']['Namespace']
    }
    NamespaceListResponse: {
      data?: components['schemas']['NamespaceListResponseDataItem'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    Namespace: {
      name: string
      rds_instance?: components['schemas']['TfModulesRdsInstanceComponent'][]
      elasticache_cluster?: components['schemas']['TfModulesElasticacheClusterComponent'][]
      pingdom_check?: components['schemas']['TfModulesPingdomCheckComponent'][]
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
      /** Format: date-time */
      publishedAt?: string
      createdBy?: {
        data?: {
          id?: number
          attributes?: {
            firstname?: string
            lastname?: string
            username?: string
            /** Format: email */
            email?: string
            resetPasswordToken?: string
            registrationToken?: string
            isActive?: boolean
            roles?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  code?: string
                  description?: string
                  users?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  permissions?: {
                    data?: {
                      id?: number
                      attributes?: {
                        action?: string
                        actionParameters?: unknown
                        subject?: string
                        properties?: unknown
                        conditions?: unknown
                        role?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        /** Format: date-time */
                        createdAt?: string
                        /** Format: date-time */
                        updatedAt?: string
                        createdBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        updatedBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                      }
                    }[]
                  }
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }[]
            }
            blocked?: boolean
            preferedLanguage?: string
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            updatedAt?: string
            createdBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            updatedBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
          }
        }
      }
      updatedBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
    }
    NamespaceResponseDataObject: {
      id?: number
      attributes?: components['schemas']['Namespace']
    }
    NamespaceResponse: {
      data?: components['schemas']['NamespaceResponseDataObject']
      meta?: Record<string, never>
    }
    TfModulesRdsInstanceComponent: {
      id?: number
      tf_label?: string
      db_instance_class?: string
      db_engine_version?: string
      rds_family?: string
      is_production?: string
      namespace?: string
      environment_name?: string
      application?: string
      tf_filename?: string
      tf_path?: string
      tf_line_start?: number
      tf_line_end?: number
      db_max_allocated_storage?: string
      infrastructure_support?: string
      business_unit?: string
      team_name?: string
      tf_mod_version?: string
      performance_insights_enabled?: boolean
      allow_major_version_upgrade?: boolean
      allow_minor_version_upgrade?: boolean
      deletion_protection?: boolean
      maintenance_window?: string
      backup_window?: string
      db_parameter?: unknown
    }
    TfModulesElasticacheClusterComponent: {
      id?: number
      application?: string
      business_unit?: string
      engine_version?: string
      environment_name?: string
      infrastructure_support?: string
      is_production?: boolean
      namespace?: string
      node_type?: string
      number_cache_clusters?: number
      parameter_group_name?: string
      team_name?: string
      tf_label?: string
      tf_filename?: string
      tf_path?: string
      tf_line_end?: number
      tf_line_start?: number
      tf_mod_version?: string
    }
    TfModulesPingdomCheckComponent: {
      id?: number
      tf_label?: string
      tf_filename?: string
      tf_path?: string
      tf_line_start?: number
      tf_line_end?: number
      type?: string
      name?: string
      host?: string
      url?: string
      probefilters?: string
      encryption?: boolean
      resolution?: number
      notifywhenbackup?: boolean
      sendnotificationwhendown?: number
      notifyagainevery?: number
      port?: number
      integrationids?: unknown
    }
    ProductRequest: {
      data: {
        name: string
        subproduct?: boolean
        /** @example string or id */
        parent?: number | string
        children?: (number | string)[]
        legacy?: boolean
        description?: string
        /** @example string or id */
        team?: number | string
        phase?: string
        /** @example string or id */
        product_set?: number | string
        delivery_manager?: string
        product_manager?: string
        confluence_link?: string
        gdrive_link?: string
        /** @example string or id */
        service_area?: number | string
        components?: (number | string)[]
        p_id: string
        slack_channel_id?: string
        slack_channel_name?: string
        alerts_prod_slack_channel?: string
        alerts_nonprod_slack_channel?: string
        slug?: string
        lead_developer?: string
      }
    }
    ProductListResponseDataItem: {
      id?: number
      attributes?: components['schemas']['Product']
    }
    ProductListResponse: {
      data?: components['schemas']['ProductListResponseDataItem'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    Product: {
      name: string
      subproduct?: boolean
      parent?: {
        data?: {
          id?: number
          attributes?: {
            name?: string
            subproduct?: boolean
            parent?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            children?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }[]
            }
            legacy?: boolean
            description?: string
            team?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  products?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  t_id?: string
                  slack_channel_id?: string
                  slack_channel_name?: string
                  slug?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: {
                        firstname?: string
                        lastname?: string
                        username?: string
                        /** Format: email */
                        email?: string
                        resetPasswordToken?: string
                        registrationToken?: string
                        isActive?: boolean
                        roles?: {
                          data?: {
                            id?: number
                            attributes?: {
                              name?: string
                              code?: string
                              description?: string
                              users?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }[]
                              }
                              permissions?: {
                                data?: {
                                  id?: number
                                  attributes?: {
                                    action?: string
                                    actionParameters?: unknown
                                    subject?: string
                                    properties?: unknown
                                    conditions?: unknown
                                    role?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                    /** Format: date-time */
                                    createdAt?: string
                                    /** Format: date-time */
                                    updatedAt?: string
                                    createdBy?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                    updatedBy?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                  }
                                }[]
                              }
                              /** Format: date-time */
                              createdAt?: string
                              /** Format: date-time */
                              updatedAt?: string
                              createdBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                              updatedBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                            }
                          }[]
                        }
                        blocked?: boolean
                        preferedLanguage?: string
                        /** Format: date-time */
                        createdAt?: string
                        /** Format: date-time */
                        updatedAt?: string
                        createdBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        updatedBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                      }
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            phase?: string
            product_set?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  products?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  ps_id?: string
                  slug?: string
                  lead_developer?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            delivery_manager?: string
            product_manager?: string
            confluence_link?: string
            gdrive_link?: string
            service_area?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  owner?: string
                  products?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  sa_id?: string
                  slug?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            components?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  title?: string
                  description?: string
                  environments?: {
                    id?: number
                    /** @enum {string} */
                    type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
                    namespace?: string
                    info_path?: string
                    health_path?: string
                    url?: string
                    cluster?: string
                    name?: string
                    monitor?: boolean
                    active_agencies?: unknown
                    swagger_docs?: string
                    ip_allow_list_enabled?: boolean
                    ip_allow_list?: unknown
                    include_in_subject_access_requests?: boolean
                    ns?: {
                      data?: {
                        id?: number
                        attributes?: {
                          name?: string
                          rds_instance?: {
                            id?: number
                            tf_label?: string
                            db_instance_class?: string
                            db_engine_version?: string
                            rds_family?: string
                            is_production?: string
                            namespace?: string
                            environment_name?: string
                            application?: string
                            tf_filename?: string
                            tf_path?: string
                            tf_line_start?: number
                            tf_line_end?: number
                            db_max_allocated_storage?: string
                            infrastructure_support?: string
                            business_unit?: string
                            team_name?: string
                            tf_mod_version?: string
                            performance_insights_enabled?: boolean
                            allow_major_version_upgrade?: boolean
                            allow_minor_version_upgrade?: boolean
                            deletion_protection?: boolean
                            maintenance_window?: string
                            backup_window?: string
                            db_parameter?: unknown
                          }[]
                          elasticache_cluster?: {
                            id?: number
                            application?: string
                            business_unit?: string
                            engine_version?: string
                            environment_name?: string
                            infrastructure_support?: string
                            is_production?: boolean
                            namespace?: string
                            node_type?: string
                            number_cache_clusters?: number
                            parameter_group_name?: string
                            team_name?: string
                            tf_label?: string
                            tf_filename?: string
                            tf_path?: string
                            tf_line_end?: number
                            tf_line_start?: number
                            tf_mod_version?: string
                          }[]
                          pingdom_check?: {
                            id?: number
                            tf_label?: string
                            tf_filename?: string
                            tf_path?: string
                            tf_line_start?: number
                            tf_line_end?: number
                            type?: string
                            name?: string
                            host?: string
                            url?: string
                            probefilters?: string
                            encryption?: boolean
                            resolution?: number
                            notifywhenbackup?: boolean
                            sendnotificationwhendown?: number
                            notifyagainevery?: number
                            port?: number
                            integrationids?: unknown
                          }[]
                          /** Format: date-time */
                          createdAt?: string
                          /** Format: date-time */
                          updatedAt?: string
                          /** Format: date-time */
                          publishedAt?: string
                          createdBy?: {
                            data?: {
                              id?: number
                              attributes?: Record<string, never>
                            }
                          }
                          updatedBy?: {
                            data?: {
                              id?: number
                              attributes?: Record<string, never>
                            }
                          }
                        }
                      }
                    }
                    modsecurity_enabled?: boolean
                    modsecurity_audit_enabled?: boolean
                    modsecurity_snippet?: string
                    build_image_tag?: string
                  }[]
                  github_template_repo?: string
                  github_only?: boolean
                  jira_project_keys?: unknown
                  github_project_teams_write?: unknown
                  github_project_teams_admin?: unknown
                  github_project_branch_protection_restricted_teams?: unknown
                  /** @enum {string} */
                  github_project_visibility?: 'public' | 'internal' | 'private'
                  product?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  alerts_prod_slack_channel?: string
                  alerts_nonprod_slack_channel?: string
                  app_insights_cloud_role_name?: string
                  api?: boolean
                  frontend?: boolean
                  part_of_monorepo?: boolean
                  github_repo?: string
                  language?: string
                  github_project_teams_maintain?: unknown
                  github_topics?: unknown
                  versions?: unknown
                  container_image?: string
                  veracode_results_url?: string
                  veracode_last_completed_scan_date?: string
                  veracode_results_summary?: unknown
                  veracode_exempt?: boolean
                  veracode_policy_rules_status?: string
                  trivy_last_completed_scan_date?: string
                  trivy_scan_summary?: unknown
                  path_to_project?: string
                  path_to_helm_dir?: string
                  github_repo_is_template?: boolean
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }[]
            }
            p_id?: string
            slack_channel_id?: string
            slack_channel_name?: string
            alerts_prod_slack_channel?: string
            alerts_nonprod_slack_channel?: string
            slug?: string
            lead_developer?: string
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            updatedAt?: string
            /** Format: date-time */
            publishedAt?: string
            createdBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            updatedBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
          }
        }
      }
      children?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }[]
      }
      legacy?: boolean
      description?: string
      team?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      phase?: string
      product_set?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      delivery_manager?: string
      product_manager?: string
      confluence_link?: string
      gdrive_link?: string
      service_area?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      components?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }[]
      }
      p_id: string
      slack_channel_id?: string
      slack_channel_name?: string
      alerts_prod_slack_channel?: string
      alerts_nonprod_slack_channel?: string
      slug?: string
      lead_developer?: string
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
      /** Format: date-time */
      publishedAt?: string
      createdBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      updatedBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
    }
    ProductResponseDataObject: {
      id?: number
      attributes?: components['schemas']['Product']
    }
    ProductResponse: {
      data?: components['schemas']['ProductResponseDataObject']
      meta?: Record<string, never>
    }
    ProductSetRequest: {
      data: {
        name: string
        products?: (number | string)[]
        ps_id: string
        slug?: string
        lead_developer?: string
      }
    }
    ProductSetListResponseDataItem: {
      id?: number
      attributes?: components['schemas']['ProductSet']
    }
    ProductSetListResponse: {
      data?: components['schemas']['ProductSetListResponseDataItem'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    ProductSet: {
      name: string
      products?: {
        data?: {
          id?: number
          attributes?: {
            name?: string
            subproduct?: boolean
            parent?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            children?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }[]
            }
            legacy?: boolean
            description?: string
            team?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  products?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  t_id?: string
                  slack_channel_id?: string
                  slack_channel_name?: string
                  slug?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: {
                        firstname?: string
                        lastname?: string
                        username?: string
                        /** Format: email */
                        email?: string
                        resetPasswordToken?: string
                        registrationToken?: string
                        isActive?: boolean
                        roles?: {
                          data?: {
                            id?: number
                            attributes?: {
                              name?: string
                              code?: string
                              description?: string
                              users?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }[]
                              }
                              permissions?: {
                                data?: {
                                  id?: number
                                  attributes?: {
                                    action?: string
                                    actionParameters?: unknown
                                    subject?: string
                                    properties?: unknown
                                    conditions?: unknown
                                    role?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                    /** Format: date-time */
                                    createdAt?: string
                                    /** Format: date-time */
                                    updatedAt?: string
                                    createdBy?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                    updatedBy?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                  }
                                }[]
                              }
                              /** Format: date-time */
                              createdAt?: string
                              /** Format: date-time */
                              updatedAt?: string
                              createdBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                              updatedBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                            }
                          }[]
                        }
                        blocked?: boolean
                        preferedLanguage?: string
                        /** Format: date-time */
                        createdAt?: string
                        /** Format: date-time */
                        updatedAt?: string
                        createdBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        updatedBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                      }
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            phase?: string
            product_set?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  products?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  ps_id?: string
                  slug?: string
                  lead_developer?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            delivery_manager?: string
            product_manager?: string
            confluence_link?: string
            gdrive_link?: string
            service_area?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  owner?: string
                  products?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  sa_id?: string
                  slug?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            components?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  title?: string
                  description?: string
                  environments?: {
                    id?: number
                    /** @enum {string} */
                    type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
                    namespace?: string
                    info_path?: string
                    health_path?: string
                    url?: string
                    cluster?: string
                    name?: string
                    monitor?: boolean
                    active_agencies?: unknown
                    swagger_docs?: string
                    ip_allow_list_enabled?: boolean
                    ip_allow_list?: unknown
                    include_in_subject_access_requests?: boolean
                    ns?: {
                      data?: {
                        id?: number
                        attributes?: {
                          name?: string
                          rds_instance?: {
                            id?: number
                            tf_label?: string
                            db_instance_class?: string
                            db_engine_version?: string
                            rds_family?: string
                            is_production?: string
                            namespace?: string
                            environment_name?: string
                            application?: string
                            tf_filename?: string
                            tf_path?: string
                            tf_line_start?: number
                            tf_line_end?: number
                            db_max_allocated_storage?: string
                            infrastructure_support?: string
                            business_unit?: string
                            team_name?: string
                            tf_mod_version?: string
                            performance_insights_enabled?: boolean
                            allow_major_version_upgrade?: boolean
                            allow_minor_version_upgrade?: boolean
                            deletion_protection?: boolean
                            maintenance_window?: string
                            backup_window?: string
                            db_parameter?: unknown
                          }[]
                          elasticache_cluster?: {
                            id?: number
                            application?: string
                            business_unit?: string
                            engine_version?: string
                            environment_name?: string
                            infrastructure_support?: string
                            is_production?: boolean
                            namespace?: string
                            node_type?: string
                            number_cache_clusters?: number
                            parameter_group_name?: string
                            team_name?: string
                            tf_label?: string
                            tf_filename?: string
                            tf_path?: string
                            tf_line_end?: number
                            tf_line_start?: number
                            tf_mod_version?: string
                          }[]
                          pingdom_check?: {
                            id?: number
                            tf_label?: string
                            tf_filename?: string
                            tf_path?: string
                            tf_line_start?: number
                            tf_line_end?: number
                            type?: string
                            name?: string
                            host?: string
                            url?: string
                            probefilters?: string
                            encryption?: boolean
                            resolution?: number
                            notifywhenbackup?: boolean
                            sendnotificationwhendown?: number
                            notifyagainevery?: number
                            port?: number
                            integrationids?: unknown
                          }[]
                          /** Format: date-time */
                          createdAt?: string
                          /** Format: date-time */
                          updatedAt?: string
                          /** Format: date-time */
                          publishedAt?: string
                          createdBy?: {
                            data?: {
                              id?: number
                              attributes?: Record<string, never>
                            }
                          }
                          updatedBy?: {
                            data?: {
                              id?: number
                              attributes?: Record<string, never>
                            }
                          }
                        }
                      }
                    }
                    modsecurity_enabled?: boolean
                    modsecurity_audit_enabled?: boolean
                    modsecurity_snippet?: string
                    build_image_tag?: string
                  }[]
                  github_template_repo?: string
                  github_only?: boolean
                  jira_project_keys?: unknown
                  github_project_teams_write?: unknown
                  github_project_teams_admin?: unknown
                  github_project_branch_protection_restricted_teams?: unknown
                  /** @enum {string} */
                  github_project_visibility?: 'public' | 'internal' | 'private'
                  product?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  alerts_prod_slack_channel?: string
                  alerts_nonprod_slack_channel?: string
                  app_insights_cloud_role_name?: string
                  api?: boolean
                  frontend?: boolean
                  part_of_monorepo?: boolean
                  github_repo?: string
                  language?: string
                  github_project_teams_maintain?: unknown
                  github_topics?: unknown
                  versions?: unknown
                  container_image?: string
                  veracode_results_url?: string
                  veracode_last_completed_scan_date?: string
                  veracode_results_summary?: unknown
                  veracode_exempt?: boolean
                  veracode_policy_rules_status?: string
                  trivy_last_completed_scan_date?: string
                  trivy_scan_summary?: unknown
                  path_to_project?: string
                  path_to_helm_dir?: string
                  github_repo_is_template?: boolean
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }[]
            }
            p_id?: string
            slack_channel_id?: string
            slack_channel_name?: string
            alerts_prod_slack_channel?: string
            alerts_nonprod_slack_channel?: string
            slug?: string
            lead_developer?: string
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            updatedAt?: string
            /** Format: date-time */
            publishedAt?: string
            createdBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            updatedBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
          }
        }[]
      }
      ps_id: string
      slug?: string
      lead_developer?: string
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
      /** Format: date-time */
      publishedAt?: string
      createdBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      updatedBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
    }
    ProductSetResponseDataObject: {
      id?: number
      attributes?: components['schemas']['ProductSet']
    }
    ProductSetResponse: {
      data?: components['schemas']['ProductSetResponseDataObject']
      meta?: Record<string, never>
    }
    ServiceAreaRequest: {
      data: {
        name: string
        owner: string
        products?: (number | string)[]
        sa_id: string
        slug?: string
      }
    }
    ServiceAreaListResponseDataItem: {
      id?: number
      attributes?: components['schemas']['ServiceArea']
    }
    ServiceAreaListResponse: {
      data?: components['schemas']['ServiceAreaListResponseDataItem'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    ServiceArea: {
      name: string
      owner: string
      products?: {
        data?: {
          id?: number
          attributes?: {
            name?: string
            subproduct?: boolean
            parent?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            children?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }[]
            }
            legacy?: boolean
            description?: string
            team?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  products?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  t_id?: string
                  slack_channel_id?: string
                  slack_channel_name?: string
                  slug?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: {
                        firstname?: string
                        lastname?: string
                        username?: string
                        /** Format: email */
                        email?: string
                        resetPasswordToken?: string
                        registrationToken?: string
                        isActive?: boolean
                        roles?: {
                          data?: {
                            id?: number
                            attributes?: {
                              name?: string
                              code?: string
                              description?: string
                              users?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }[]
                              }
                              permissions?: {
                                data?: {
                                  id?: number
                                  attributes?: {
                                    action?: string
                                    actionParameters?: unknown
                                    subject?: string
                                    properties?: unknown
                                    conditions?: unknown
                                    role?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                    /** Format: date-time */
                                    createdAt?: string
                                    /** Format: date-time */
                                    updatedAt?: string
                                    createdBy?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                    updatedBy?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                  }
                                }[]
                              }
                              /** Format: date-time */
                              createdAt?: string
                              /** Format: date-time */
                              updatedAt?: string
                              createdBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                              updatedBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                            }
                          }[]
                        }
                        blocked?: boolean
                        preferedLanguage?: string
                        /** Format: date-time */
                        createdAt?: string
                        /** Format: date-time */
                        updatedAt?: string
                        createdBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        updatedBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                      }
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            phase?: string
            product_set?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  products?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  ps_id?: string
                  slug?: string
                  lead_developer?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            delivery_manager?: string
            product_manager?: string
            confluence_link?: string
            gdrive_link?: string
            service_area?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  owner?: string
                  products?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  sa_id?: string
                  slug?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            components?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  title?: string
                  description?: string
                  environments?: {
                    id?: number
                    /** @enum {string} */
                    type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
                    namespace?: string
                    info_path?: string
                    health_path?: string
                    url?: string
                    cluster?: string
                    name?: string
                    monitor?: boolean
                    active_agencies?: unknown
                    swagger_docs?: string
                    ip_allow_list_enabled?: boolean
                    ip_allow_list?: unknown
                    include_in_subject_access_requests?: boolean
                    ns?: {
                      data?: {
                        id?: number
                        attributes?: {
                          name?: string
                          rds_instance?: {
                            id?: number
                            tf_label?: string
                            db_instance_class?: string
                            db_engine_version?: string
                            rds_family?: string
                            is_production?: string
                            namespace?: string
                            environment_name?: string
                            application?: string
                            tf_filename?: string
                            tf_path?: string
                            tf_line_start?: number
                            tf_line_end?: number
                            db_max_allocated_storage?: string
                            infrastructure_support?: string
                            business_unit?: string
                            team_name?: string
                            tf_mod_version?: string
                            performance_insights_enabled?: boolean
                            allow_major_version_upgrade?: boolean
                            allow_minor_version_upgrade?: boolean
                            deletion_protection?: boolean
                            maintenance_window?: string
                            backup_window?: string
                            db_parameter?: unknown
                          }[]
                          elasticache_cluster?: {
                            id?: number
                            application?: string
                            business_unit?: string
                            engine_version?: string
                            environment_name?: string
                            infrastructure_support?: string
                            is_production?: boolean
                            namespace?: string
                            node_type?: string
                            number_cache_clusters?: number
                            parameter_group_name?: string
                            team_name?: string
                            tf_label?: string
                            tf_filename?: string
                            tf_path?: string
                            tf_line_end?: number
                            tf_line_start?: number
                            tf_mod_version?: string
                          }[]
                          pingdom_check?: {
                            id?: number
                            tf_label?: string
                            tf_filename?: string
                            tf_path?: string
                            tf_line_start?: number
                            tf_line_end?: number
                            type?: string
                            name?: string
                            host?: string
                            url?: string
                            probefilters?: string
                            encryption?: boolean
                            resolution?: number
                            notifywhenbackup?: boolean
                            sendnotificationwhendown?: number
                            notifyagainevery?: number
                            port?: number
                            integrationids?: unknown
                          }[]
                          /** Format: date-time */
                          createdAt?: string
                          /** Format: date-time */
                          updatedAt?: string
                          /** Format: date-time */
                          publishedAt?: string
                          createdBy?: {
                            data?: {
                              id?: number
                              attributes?: Record<string, never>
                            }
                          }
                          updatedBy?: {
                            data?: {
                              id?: number
                              attributes?: Record<string, never>
                            }
                          }
                        }
                      }
                    }
                    modsecurity_enabled?: boolean
                    modsecurity_audit_enabled?: boolean
                    modsecurity_snippet?: string
                    build_image_tag?: string
                  }[]
                  github_template_repo?: string
                  github_only?: boolean
                  jira_project_keys?: unknown
                  github_project_teams_write?: unknown
                  github_project_teams_admin?: unknown
                  github_project_branch_protection_restricted_teams?: unknown
                  /** @enum {string} */
                  github_project_visibility?: 'public' | 'internal' | 'private'
                  product?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  alerts_prod_slack_channel?: string
                  alerts_nonprod_slack_channel?: string
                  app_insights_cloud_role_name?: string
                  api?: boolean
                  frontend?: boolean
                  part_of_monorepo?: boolean
                  github_repo?: string
                  language?: string
                  github_project_teams_maintain?: unknown
                  github_topics?: unknown
                  versions?: unknown
                  container_image?: string
                  veracode_results_url?: string
                  veracode_last_completed_scan_date?: string
                  veracode_results_summary?: unknown
                  veracode_exempt?: boolean
                  veracode_policy_rules_status?: string
                  trivy_last_completed_scan_date?: string
                  trivy_scan_summary?: unknown
                  path_to_project?: string
                  path_to_helm_dir?: string
                  github_repo_is_template?: boolean
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }[]
            }
            p_id?: string
            slack_channel_id?: string
            slack_channel_name?: string
            alerts_prod_slack_channel?: string
            alerts_nonprod_slack_channel?: string
            slug?: string
            lead_developer?: string
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            updatedAt?: string
            /** Format: date-time */
            publishedAt?: string
            createdBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            updatedBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
          }
        }[]
      }
      sa_id: string
      slug?: string
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
      /** Format: date-time */
      publishedAt?: string
      createdBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      updatedBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
    }
    ServiceAreaResponseDataObject: {
      id?: number
      attributes?: components['schemas']['ServiceArea']
    }
    ServiceAreaResponse: {
      data?: components['schemas']['ServiceAreaResponseDataObject']
      meta?: Record<string, never>
    }
    TeamRequest: {
      data: {
        name: string
        products?: (number | string)[]
        t_id: string
        slack_channel_id?: string
        slack_channel_name?: string
        slug?: string
      }
    }
    TeamListResponseDataItem: {
      id?: number
      attributes?: components['schemas']['Team']
    }
    TeamListResponse: {
      data?: components['schemas']['TeamListResponseDataItem'][]
      meta?: {
        pagination?: {
          page?: number
          pageSize?: number
          pageCount?: number
          total?: number
        }
      }
    }
    Team: {
      name: string
      products?: {
        data?: {
          id?: number
          attributes?: {
            name?: string
            subproduct?: boolean
            parent?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            children?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }[]
            }
            legacy?: boolean
            description?: string
            team?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  products?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  t_id?: string
                  slack_channel_id?: string
                  slack_channel_name?: string
                  slug?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: {
                        firstname?: string
                        lastname?: string
                        username?: string
                        /** Format: email */
                        email?: string
                        resetPasswordToken?: string
                        registrationToken?: string
                        isActive?: boolean
                        roles?: {
                          data?: {
                            id?: number
                            attributes?: {
                              name?: string
                              code?: string
                              description?: string
                              users?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }[]
                              }
                              permissions?: {
                                data?: {
                                  id?: number
                                  attributes?: {
                                    action?: string
                                    actionParameters?: unknown
                                    subject?: string
                                    properties?: unknown
                                    conditions?: unknown
                                    role?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                    /** Format: date-time */
                                    createdAt?: string
                                    /** Format: date-time */
                                    updatedAt?: string
                                    createdBy?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                    updatedBy?: {
                                      data?: {
                                        id?: number
                                        attributes?: Record<string, never>
                                      }
                                    }
                                  }
                                }[]
                              }
                              /** Format: date-time */
                              createdAt?: string
                              /** Format: date-time */
                              updatedAt?: string
                              createdBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                              updatedBy?: {
                                data?: {
                                  id?: number
                                  attributes?: Record<string, never>
                                }
                              }
                            }
                          }[]
                        }
                        blocked?: boolean
                        preferedLanguage?: string
                        /** Format: date-time */
                        createdAt?: string
                        /** Format: date-time */
                        updatedAt?: string
                        createdBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                        updatedBy?: {
                          data?: {
                            id?: number
                            attributes?: Record<string, never>
                          }
                        }
                      }
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            phase?: string
            product_set?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  products?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  ps_id?: string
                  slug?: string
                  lead_developer?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            delivery_manager?: string
            product_manager?: string
            confluence_link?: string
            gdrive_link?: string
            service_area?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  owner?: string
                  products?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }[]
                  }
                  sa_id?: string
                  slug?: string
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }
            }
            components?: {
              data?: {
                id?: number
                attributes?: {
                  name?: string
                  title?: string
                  description?: string
                  environments?: {
                    id?: number
                    /** @enum {string} */
                    type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
                    namespace?: string
                    info_path?: string
                    health_path?: string
                    url?: string
                    cluster?: string
                    name?: string
                    monitor?: boolean
                    active_agencies?: unknown
                    swagger_docs?: string
                    ip_allow_list_enabled?: boolean
                    ip_allow_list?: unknown
                    include_in_subject_access_requests?: boolean
                    ns?: {
                      data?: {
                        id?: number
                        attributes?: {
                          name?: string
                          rds_instance?: {
                            id?: number
                            tf_label?: string
                            db_instance_class?: string
                            db_engine_version?: string
                            rds_family?: string
                            is_production?: string
                            namespace?: string
                            environment_name?: string
                            application?: string
                            tf_filename?: string
                            tf_path?: string
                            tf_line_start?: number
                            tf_line_end?: number
                            db_max_allocated_storage?: string
                            infrastructure_support?: string
                            business_unit?: string
                            team_name?: string
                            tf_mod_version?: string
                            performance_insights_enabled?: boolean
                            allow_major_version_upgrade?: boolean
                            allow_minor_version_upgrade?: boolean
                            deletion_protection?: boolean
                            maintenance_window?: string
                            backup_window?: string
                            db_parameter?: unknown
                          }[]
                          elasticache_cluster?: {
                            id?: number
                            application?: string
                            business_unit?: string
                            engine_version?: string
                            environment_name?: string
                            infrastructure_support?: string
                            is_production?: boolean
                            namespace?: string
                            node_type?: string
                            number_cache_clusters?: number
                            parameter_group_name?: string
                            team_name?: string
                            tf_label?: string
                            tf_filename?: string
                            tf_path?: string
                            tf_line_end?: number
                            tf_line_start?: number
                            tf_mod_version?: string
                          }[]
                          pingdom_check?: {
                            id?: number
                            tf_label?: string
                            tf_filename?: string
                            tf_path?: string
                            tf_line_start?: number
                            tf_line_end?: number
                            type?: string
                            name?: string
                            host?: string
                            url?: string
                            probefilters?: string
                            encryption?: boolean
                            resolution?: number
                            notifywhenbackup?: boolean
                            sendnotificationwhendown?: number
                            notifyagainevery?: number
                            port?: number
                            integrationids?: unknown
                          }[]
                          /** Format: date-time */
                          createdAt?: string
                          /** Format: date-time */
                          updatedAt?: string
                          /** Format: date-time */
                          publishedAt?: string
                          createdBy?: {
                            data?: {
                              id?: number
                              attributes?: Record<string, never>
                            }
                          }
                          updatedBy?: {
                            data?: {
                              id?: number
                              attributes?: Record<string, never>
                            }
                          }
                        }
                      }
                    }
                    modsecurity_enabled?: boolean
                    modsecurity_audit_enabled?: boolean
                    modsecurity_snippet?: string
                    build_image_tag?: string
                  }[]
                  github_template_repo?: string
                  github_only?: boolean
                  jira_project_keys?: unknown
                  github_project_teams_write?: unknown
                  github_project_teams_admin?: unknown
                  github_project_branch_protection_restricted_teams?: unknown
                  /** @enum {string} */
                  github_project_visibility?: 'public' | 'internal' | 'private'
                  product?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  alerts_prod_slack_channel?: string
                  alerts_nonprod_slack_channel?: string
                  app_insights_cloud_role_name?: string
                  api?: boolean
                  frontend?: boolean
                  part_of_monorepo?: boolean
                  github_repo?: string
                  language?: string
                  github_project_teams_maintain?: unknown
                  github_topics?: unknown
                  versions?: unknown
                  container_image?: string
                  veracode_results_url?: string
                  veracode_last_completed_scan_date?: string
                  veracode_results_summary?: unknown
                  veracode_exempt?: boolean
                  veracode_policy_rules_status?: string
                  trivy_last_completed_scan_date?: string
                  trivy_scan_summary?: unknown
                  path_to_project?: string
                  path_to_helm_dir?: string
                  github_repo_is_template?: boolean
                  /** Format: date-time */
                  createdAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  /** Format: date-time */
                  publishedAt?: string
                  createdBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                  updatedBy?: {
                    data?: {
                      id?: number
                      attributes?: Record<string, never>
                    }
                  }
                }
              }[]
            }
            p_id?: string
            slack_channel_id?: string
            slack_channel_name?: string
            alerts_prod_slack_channel?: string
            alerts_nonprod_slack_channel?: string
            slug?: string
            lead_developer?: string
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            updatedAt?: string
            /** Format: date-time */
            publishedAt?: string
            createdBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
            updatedBy?: {
              data?: {
                id?: number
                attributes?: Record<string, never>
              }
            }
          }
        }[]
      }
      t_id: string
      slack_channel_id?: string
      slack_channel_name?: string
      slug?: string
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
      /** Format: date-time */
      publishedAt?: string
      createdBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
      updatedBy?: {
        data?: {
          id?: number
          attributes?: Record<string, never>
        }
      }
    }
    TeamResponseDataObject: {
      id?: number
      attributes?: components['schemas']['Team']
    }
    TeamResponse: {
      data?: components['schemas']['TeamResponseDataObject']
      meta?: Record<string, never>
    }
    UploadFile: {
      id?: number
      name?: string
      alternativeText?: string
      caption?: string
      /** Format: integer */
      width?: number
      /** Format: integer */
      height?: number
      formats?: number
      hash?: string
      ext?: string
      mime?: string
      /** Format: double */
      size?: number
      url?: string
      previewUrl?: string
      provider?: string
      provider_metadata?: Record<string, never>
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
    }
    'Users-Permissions-Role': {
      id?: number
      name?: string
      description?: string
      type?: string
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      updatedAt?: string
    }
    'Users-Permissions-User': {
      /** @example 1 */
      id?: number
      /** @example foo.bar */
      username?: string
      /** @example foo.bar@strapi.io */
      email?: string
      /** @example local */
      provider?: string
      /** @example true */
      confirmed?: boolean
      /** @example false */
      blocked?: boolean
      /**
       * Format: date-time
       * @example 2022-06-02T08:32:06.258Z
       */
      createdAt?: string
      /**
       * Format: date-time
       * @example 2022-06-02T08:32:06.267Z
       */
      updatedAt?: string
    }
    'Users-Permissions-UserRegistration': {
      /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c */
      jwt?: string
      user?: components['schemas']['Users-Permissions-User']
    }
    'Users-Permissions-PermissionsTree': {
      [key: string]: {
        /** @description every controller of the api */
        controllers?: {
          [key: string]: {
            [key: string]: {
              enabled?: boolean
              policy?: string
            }
          }
        }
      }
    }
  }
  responses: never
  parameters: never
  requestBodies: {
    'Users-Permissions-RoleRequest': {
      content: {
        /** @example {
         *       "name": "foo",
         *       "description": "role foo",
         *       "permissions": {
         *         "api::content-type.content-type": {
         *           "controllers": {
         *             "controllerA": {
         *               "find": {
         *                 "enabled": true
         *               }
         *             }
         *           }
         *         }
         *       }
         *     } */
        'application/json': {
          name?: string
          description?: string
          type?: string
          permissions?: components['schemas']['Users-Permissions-PermissionsTree']
        }
      }
    }
  }
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  'get/components': {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Relations to return */
        populate?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComponentListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/components': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ComponentRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComponentResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/components/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComponentResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/components/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ComponentRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComponentResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/components/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/custom-component-views': {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Relations to return */
        populate?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CustomComponentViewListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/custom-component-views': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CustomComponentViewRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CustomComponentViewResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/custom-component-views/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CustomComponentViewResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/custom-component-views/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CustomComponentViewRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CustomComponentViewResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/custom-component-views/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/github-repo-requests': {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Relations to return */
        populate?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GithubRepoRequestListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/github-repo-requests': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GithubRepoRequestRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GithubRepoRequestResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/github-repo-requests/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GithubRepoRequestResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/github-repo-requests/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GithubRepoRequestRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GithubRepoRequestResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/github-repo-requests/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/namespaces': {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Relations to return */
        populate?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NamespaceListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/namespaces': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NamespaceRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NamespaceResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/namespaces/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NamespaceResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/namespaces/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NamespaceRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NamespaceResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/namespaces/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/products': {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Relations to return */
        populate?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/products': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProductRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/products/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/products/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProductRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/products/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/product-sets': {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Relations to return */
        populate?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductSetListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/product-sets': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProductSetRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductSetResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/product-sets/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductSetResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/product-sets/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProductSetRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductSetResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/product-sets/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/service-areas': {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Relations to return */
        populate?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceAreaListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/service-areas': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ServiceAreaRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceAreaResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/service-areas/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceAreaResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/service-areas/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ServiceAreaRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceAreaResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/service-areas/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/teams': {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Relations to return */
        populate?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TeamListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/teams': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TeamResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/teams/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TeamResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/teams/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TeamResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/teams/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
}
