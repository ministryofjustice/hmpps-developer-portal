/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/{provider}/callback': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Default Callback from provider auth */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Provider name */
          provider: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-UserRegistration']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/change-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Update user's own password */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            currentPassword: string
            password: string
            passwordConfirmation: string
          }
        }
      }
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-UserRegistration']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/email-confirmation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Confirm user email */
    get: {
      parameters: {
        query?: {
          /** @description confirmation token received by email */
          confirmation?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Redirects to the configure email confirmation redirect url */
        301: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/forgot-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Send rest password email */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "email": "foo.bar@strapi.io"
           *     } */
          'application/json': {
            email?: string
          }
        }
      }
      responses: {
        /** @description Returns ok */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {string} */
              ok?: true
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/local': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Local login
     * @description Returns a jwt token and user info
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "identifier": "foobar",
           *       "password": "Test1234"
           *     } */
          'application/json': {
            identifier?: string
            password?: string
          }
        }
      }
      responses: {
        /** @description Connection */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-UserRegistration']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/local/register': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Register a user
     * @description Returns a jwt token and user info
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "username": "foobar",
           *       "email": "foo.bar@strapi.io",
           *       "password": "Test1234"
           *     } */
          'application/json': {
            email?: string
            password?: string
            username?: string
          }
        }
      }
      responses: {
        /** @description Successful registration */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-UserRegistration']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/reset-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Rest user password */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "password": "Test1234",
           *       "passwordConfirmation": "Test1234",
           *       "code": "zertyoaizndoianzodianzdonaizdoinaozdnia"
           *     } */
          'application/json': {
            code?: string
            password?: string
            passwordConfirmation?: string
          }
        }
      }
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Users-Permissions-UserRegistration']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/send-email-confirmation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Send confirmation email */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            email?: string
          }
        }
      }
      responses: {
        /** @description Returns email and boolean to confirm email was sent */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              email?: string
              /** @enum {string} */
              sent?: true
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/components': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/components']
    put?: never
    post: operations['post/components']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/components/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/components/{id}']
    put: operations['put/components/{id}']
    post?: never
    delete: operations['delete/components/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/connect/{provider}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Login with a provider
     * @description Redirects to provider login before being redirect to /auth/{provider}/callback
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Provider name */
          provider: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Redirect response */
        301: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cp-namespace-requests': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/cp-namespace-requests']
    put?: never
    post: operations['post/cp-namespace-requests']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cp-namespace-requests/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/cp-namespace-requests/{id}']
    put: operations['put/cp-namespace-requests/{id}']
    post?: never
    delete: operations['delete/cp-namespace-requests/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/custom-component-views': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/custom-component-views']
    put?: never
    post: operations['post/custom-component-views']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/custom-component-views/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/custom-component-views/{id}']
    put: operations['put/custom-component-views/{id}']
    post?: never
    delete: operations['delete/custom-component-views/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/environments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/environments']
    put?: never
    post: operations['post/environments']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/environments/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/environments/{id}']
    put: operations['put/environments/{id}']
    post?: never
    delete: operations['delete/environments/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/github-repo-requests': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/github-repo-requests']
    put?: never
    post: operations['post/github-repo-requests']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/github-repo-requests/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/github-repo-requests/{id}']
    put: operations['put/github-repo-requests/{id}']
    post?: never
    delete: operations['delete/github-repo-requests/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/github-teams': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/github-teams']
    put?: never
    post: operations['post/github-teams']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/github-teams/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/github-teams/{id}']
    put: operations['put/github-teams/{id}']
    post?: never
    delete: operations['delete/github-teams/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/namespaces': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/namespaces']
    put?: never
    post: operations['post/namespaces']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/namespaces/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/namespaces/{id}']
    put: operations['put/namespaces/{id}']
    post?: never
    delete: operations['delete/namespaces/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/product-sets': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/product-sets']
    put?: never
    post: operations['post/product-sets']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/product-sets/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/product-sets/{id}']
    put: operations['put/product-sets/{id}']
    post?: never
    delete: operations['delete/product-sets/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/products': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/products']
    put?: never
    post: operations['post/products']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/products/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/products/{id}']
    put: operations['put/products/{id}']
    post?: never
    delete: operations['delete/products/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/recommended-versions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/recommended-versions']
    put?: never
    post: operations['post/recommended-versions']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/recommended-versions/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/recommended-versions/{id}']
    put: operations['put/recommended-versions/{id}']
    post?: never
    delete: operations['delete/recommended-versions/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/scheduled-jobs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/scheduled-jobs']
    put?: never
    post: operations['post/scheduled-jobs']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/scheduled-jobs/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/scheduled-jobs/{id}']
    put: operations['put/scheduled-jobs/{id}']
    post?: never
    delete: operations['delete/scheduled-jobs/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/service-areas': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/service-areas']
    put?: never
    post: operations['post/service-areas']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/service-areas/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/service-areas/{id}']
    put: operations['put/service-areas/{id}']
    post?: never
    delete: operations['delete/service-areas/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/teams': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/teams']
    put?: never
    post: operations['post/teams']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/teams/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/teams/{id}']
    put: operations['put/teams/{id}']
    post?: never
    delete: operations['delete/teams/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/trivy-scans': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/trivy-scans']
    put?: never
    post: operations['post/trivy-scans']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/trivy-scans/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['get/trivy-scans/{id}']
    put: operations['put/trivy-scans/{id}']
    post?: never
    delete: operations['delete/trivy-scans/{id}']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/upload': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Upload files */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      /** @description Upload files */
      requestBody: {
        content: {
          'multipart/form-data': {
            /** @description The field of the entry which the file(s) will be precisely linked to. */
            field?: string
            files: string[]
            /** @description The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3). */
            path?: string
            /** @description The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant). */
            ref?: string
            /** @description The ID of the entry which the file(s) will be linked to */
            refId?: string
          }
        }
      }
      responses: {
        /** @description response */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UploadFile'][]
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/upload?id={id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Upload file information */
    post: {
      parameters: {
        query: {
          /** @description File id */
          id: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      /** @description Upload files */
      requestBody: {
        content: {
          'multipart/form-data': {
            fileInfo?: {
              alternativeText?: string
              caption?: string
              name?: string
            }
            /** Format: binary */
            files?: string
          }
        }
      }
      responses: {
        /** @description response */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UploadFile'][]
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/upload/files': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Get a list of files */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UploadFile'][]
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/upload/files/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Get a specific file */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UploadFile']
          }
        }
      }
    }
    put?: never
    post?: never
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Delete a file */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UploadFile']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get list of users */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns an array of users */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example [
             *       {
             *         "id": 9,
             *         "username": "foao@strapi.io",
             *         "email": "foao@strapi.io",
             *         "provider": "local",
             *         "confirmed": false,
             *         "blocked": false,
             *         "createdAt": "2022-06-01T18:32:35.211Z",
             *         "updatedAt": "2022-06-01T18:32:35.217Z"
             *       }
             *     ] */
            'application/json': components['schemas']['Users-Permissions-User'][]
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    /** Create a user */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "username": "foo",
           *       "email": "foo@strapi.io",
           *       "password": "foo-password"
           *     } */
          'application/json': {
            email: string
            password: string
            username: string
          }
        }
      }
      responses: {
        /** @description Returns created user info */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "id": 1,
             *       "username": "foo",
             *       "email": "foo@strapi.io",
             *       "provider": "local",
             *       "confirmed": false,
             *       "blocked": false,
             *       "createdAt": "2022-05-19T17:35:35.096Z",
             *       "updatedAt": "2022-05-19T17:35:35.096Z",
             *       "role": {
             *         "id": 1,
             *         "name": "X",
             *         "description": "Default role given to authenticated user.",
             *         "type": "authenticated",
             *         "createdAt": "2022-05-19T17:35:35.096Z",
             *         "updatedAt": "2022-06-04T07:11:59.551Z"
             *       }
             *     } */
            'application/json': components['schemas']['Users-Permissions-User'] & {
              role?: components['schemas']['Users-Permissions-Role']
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users-permissions/permissions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get default generated permissions */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns the permissions tree */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "permissions": {
             *         "api::content-type.content-type": {
             *           "controllers": {
             *             "controllerA": {
             *               "find": {
             *                 "enabled": false,
             *                 "policy": ""
             *               },
             *               "findOne": {
             *                 "enabled": false,
             *                 "policy": ""
             *               },
             *               "create": {
             *                 "enabled": false,
             *                 "policy": ""
             *               }
             *             },
             *             "controllerB": {
             *               "find": {
             *                 "enabled": false,
             *                 "policy": ""
             *               },
             *               "findOne": {
             *                 "enabled": false,
             *                 "policy": ""
             *               },
             *               "create": {
             *                 "enabled": false,
             *                 "policy": ""
             *               }
             *             }
             *           }
             *         }
             *       }
             *     } */
            'application/json': {
              permissions?: components['schemas']['Users-Permissions-PermissionsTree']
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users-permissions/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List roles */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns list of roles */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "roles": [
             *         {
             *           "id": 1,
             *           "name": "Public",
             *           "description": "Default role given to unauthenticated user.",
             *           "type": "public",
             *           "createdAt": "2022-05-19T17:35:35.097Z",
             *           "updatedAt": "2022-05-31T16:05:36.603Z",
             *           "nb_users": 0
             *         }
             *       ]
             *     } */
            'application/json': {
              roles?: (components['schemas']['Users-Permissions-Role'] & {
                nb_users?: number
              })[]
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    /** Create a role */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: components['requestBodies']['Users-Permissions-RoleRequest']
      responses: {
        /** @description Returns ok if the role was create */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {string} */
              ok?: true
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users-permissions/roles/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a role */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description role Id */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns the role */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "role": {
             *         "id": 1,
             *         "name": "Public",
             *         "description": "Default role given to unauthenticated user.",
             *         "type": "public",
             *         "createdAt": "2022-05-19T17:35:35.097Z",
             *         "updatedAt": "2022-05-31T16:05:36.603Z",
             *         "permissions": {
             *           "api::content-type.content-type": {
             *             "controllers": {
             *               "controllerA": {
             *                 "find": {
             *                   "enabled": true
             *                 }
             *               }
             *             }
             *           }
             *         }
             *       }
             *     } */
            'application/json': {
              role?: components['schemas']['Users-Permissions-Role']
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users-permissions/roles/{role}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update a role */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description role Id */
          role: string
        }
        cookie?: never
      }
      requestBody: components['requestBodies']['Users-Permissions-RoleRequest']
      responses: {
        /** @description Returns ok if the role was udpated */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {string} */
              ok?: true
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    post?: never
    /** Delete a role */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description role Id */
          role: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns ok if the role was delete */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {string} */
              ok?: true
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a user */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description user Id */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns a user */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "id": 1,
             *       "username": "foo",
             *       "email": "foo@strapi.io",
             *       "provider": "local",
             *       "confirmed": false,
             *       "blocked": false,
             *       "createdAt": "2022-05-19T17:35:35.096Z",
             *       "updatedAt": "2022-05-19T17:35:35.096Z"
             *     } */
            'application/json': components['schemas']['Users-Permissions-User']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    /** Update a user */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description user Id */
          id: string
        }
        cookie?: never
      }
      requestBody: {
        content: {
          /** @example {
           *       "username": "foo",
           *       "email": "foo@strapi.io",
           *       "password": "foo-password"
           *     } */
          'application/json': {
            email: string
            password: string
            username: string
          }
        }
      }
      responses: {
        /** @description Returns updated user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "id": 1,
             *       "username": "foo",
             *       "email": "foo@strapi.io",
             *       "provider": "local",
             *       "confirmed": false,
             *       "blocked": false,
             *       "createdAt": "2022-05-19T17:35:35.096Z",
             *       "updatedAt": "2022-05-19T17:35:35.096Z",
             *       "role": {
             *         "id": 1,
             *         "name": "X",
             *         "description": "Default role given to authenticated user.",
             *         "type": "authenticated",
             *         "createdAt": "2022-05-19T17:35:35.096Z",
             *         "updatedAt": "2022-06-04T07:11:59.551Z"
             *       }
             *     } */
            'application/json': components['schemas']['Users-Permissions-User'] & {
              role?: components['schemas']['Users-Permissions-Role']
            }
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    post?: never
    /** Delete a user */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description user Id */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns deleted user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "id": 1,
             *       "username": "foo",
             *       "email": "foo@strapi.io",
             *       "provider": "local",
             *       "confirmed": false,
             *       "blocked": false,
             *       "createdAt": "2022-05-19T17:35:35.096Z",
             *       "updatedAt": "2022-05-19T17:35:35.096Z"
             *     } */
            'application/json': components['schemas']['Users-Permissions-User']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get user count */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns a number */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example 1 */
            'application/json': number
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get authenticated user info */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns user info */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "id": 1,
             *       "username": "foo",
             *       "email": "foo@strapi.io",
             *       "provider": "local",
             *       "confirmed": false,
             *       "blocked": false,
             *       "createdAt": "2022-05-19T17:35:35.096Z",
             *       "updatedAt": "2022-05-19T17:35:35.096Z"
             *     } */
            'application/json': components['schemas']['Users-Permissions-User']
          }
        }
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Error']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    Component: {
      api?: boolean
      app_insights_cloud_role_name?: string
      archived?: boolean
      codescanning_summary?: unknown
      container_image?: string
      /** Format: date-time */
      createdAt?: string
      createdBy?: {
        documentId?: string
        id?: number
      }
      description?: string
      disabled_workflows?: unknown
      documentId?: string
      envs?: {
        active_agencies?: unknown
        alert_severity_label?: string
        alerts_slack_channel?: string
        build_image_tag?: string
        cluster?: string
        component?: {
          api?: boolean
          app_insights_cloud_role_name?: string
          archived?: boolean
          codescanning_summary?: unknown
          container_image?: string
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          description?: string
          disabled_workflows?: unknown
          documentId?: string
          envs?: {
            documentId?: string
            id?: number
          }[]
          frontend?: boolean
          github_enforce_admins_enabled?: boolean
          github_only?: boolean
          github_project_branch_protection_restricted_teams?: unknown
          github_project_teams_admin?: unknown
          github_project_teams_maintain?: unknown
          github_project_teams_write?: unknown
          /** @enum {string} */
          github_project_visibility?: 'public' | 'internal' | 'private'
          github_repo?: string
          github_repo_is_template?: boolean
          github_template_repo?: string
          github_topics?: unknown
          id?: number
          jira_project_keys?: unknown
          language?: string
          latest_commit?: components['schemas']['PropertiesCommitComponent']
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          part_of_monorepo?: boolean
          path_to_helm_dir?: string
          path_to_project?: string
          product?: {
            children?: {
              documentId?: string
              id?: number
            }[]
            components?: {
              documentId?: string
              id?: number
            }[]
            confluence_link?: string
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            delivery_manager?: string
            description?: string
            documentId?: string
            gdrive_link?: string
            id?: number
            lead_developer?: string
            legacy?: boolean
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            name?: string
            p_id?: string
            parent?: {
              documentId?: string
              id?: number
            }
            phase?: string
            product_manager?: string
            product_set?: {
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                documentId?: string
                id?: number
              }
              documentId?: string
              id?: number
              lead_developer?: string
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              name?: string
              products?: {
                documentId?: string
                id?: number
              }[]
              ps_id?: string
              /** Format: date-time */
              publishedAt?: string
              slug?: string
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
            }
            /** Format: date-time */
            publishedAt?: string
            service_area?: {
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                documentId?: string
                id?: number
              }
              documentId?: string
              id?: number
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              name?: string
              owner?: string
              products?: {
                documentId?: string
                id?: number
              }[]
              /** Format: date-time */
              publishedAt?: string
              sa_id?: string
              slug?: string
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
            }
            slack_channel_id?: string
            slack_channel_name?: string
            slug?: string
            subproduct?: boolean
            team?: {
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                blocked?: boolean
                /** Format: date-time */
                createdAt?: string
                createdBy?: {
                  documentId?: string
                  id?: number
                }
                documentId?: string
                /** Format: email */
                email?: string
                firstname?: string
                id?: number
                isActive?: boolean
                lastname?: string
                locale?: string
                localizations?: {
                  documentId?: string
                  id?: number
                }[]
                preferedLanguage?: string
                /** Format: date-time */
                publishedAt?: string
                registrationToken?: string
                resetPasswordToken?: string
                roles?: {
                  code?: string
                  /** Format: date-time */
                  createdAt?: string
                  createdBy?: {
                    documentId?: string
                    id?: number
                  }
                  description?: string
                  documentId?: string
                  id?: number
                  locale?: string
                  localizations?: {
                    documentId?: string
                    id?: number
                  }[]
                  name?: string
                  permissions?: {
                    action?: string
                    actionParameters?: unknown
                    conditions?: unknown
                    /** Format: date-time */
                    createdAt?: string
                    createdBy?: {
                      documentId?: string
                      id?: number
                    }
                    documentId?: string
                    id?: number
                    locale?: string
                    localizations?: {
                      documentId?: string
                      id?: number
                    }[]
                    properties?: unknown
                    /** Format: date-time */
                    publishedAt?: string
                    role?: {
                      documentId?: string
                      id?: number
                    }
                    subject?: string
                    /** Format: date-time */
                    updatedAt?: string
                    updatedBy?: {
                      documentId?: string
                      id?: number
                    }
                  }[]
                  /** Format: date-time */
                  publishedAt?: string
                  /** Format: date-time */
                  updatedAt?: string
                  updatedBy?: {
                    documentId?: string
                    id?: number
                  }
                  users?: {
                    documentId?: string
                    id?: number
                  }[]
                }[]
                /** Format: date-time */
                updatedAt?: string
                updatedBy?: {
                  documentId?: string
                  id?: number
                }
                username?: string
              }
              documentId?: string
              id?: number
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              name?: string
              products?: {
                documentId?: string
                id?: number
              }[]
              /** Format: date-time */
              publishedAt?: string
              slack_channel_id?: string
              slack_channel_name?: string
              slug?: string
              t_id?: string
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
            }
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }
          /** Format: date-time */
          publishedAt?: string
          slack_channel_nonprod_release_notify?: string
          slack_channel_prod_release_notify?: string
          slack_channel_security_scans_notify?: string
          standards_compliance?: unknown
          title?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
          veracode_exempt?: boolean
          veracode_last_completed_scan_date?: string
          veracode_policy_rules_status?: string
          veracode_results_summary?: unknown
          veracode_results_url?: string
          versions?: unknown
        }
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        documentId?: string
        health_path?: string
        id?: number
        include_in_subject_access_requests?: boolean
        info_path?: string
        ip_allow_list?: unknown
        ip_allow_list_enabled?: boolean
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        manually_managed?: boolean
        modsecurity_audit_enabled?: boolean
        modsecurity_enabled?: boolean
        modsecurity_snippet?: string
        monitor?: boolean
        name?: string
        namespace?: string
        ns?: {
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          documentId?: string
          elasticache_cluster?: components['schemas']['TfModulesElasticacheClusterComponent'][]
          hmpps_template?: components['schemas']['TfModulesHmppsTerraformTemplateComponent'][]
          id?: number
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          pingdom_check?: components['schemas']['TfModulesPingdomCheckComponent'][]
          /** Format: date-time */
          publishedAt?: string
          rds_instance?: components['schemas']['TfModulesRdsInstanceComponent'][]
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
        }
        pingdom_paused?: boolean
        pingdom_sre_managed?: boolean
        /** Format: date-time */
        publishedAt?: string
        swagger_docs?: string
        trivy_scan?: {
          build_image_tag?: string
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          documentId?: string
          environments?: unknown
          id?: number
          image_id?: string
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          /** Format: date-time */
          publishedAt?: string
          /** @enum {string} */
          scan_status?: 'Failed' | 'Succeeded'
          scan_summary?: unknown
          trivy_scan_timestamp?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
        }
        /** @enum {string} */
        type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
        url?: string
      }[]
      frontend?: boolean
      github_enforce_admins_enabled?: boolean
      github_only?: boolean
      github_project_branch_protection_restricted_teams?: unknown
      github_project_teams_admin?: unknown
      github_project_teams_maintain?: unknown
      github_project_teams_write?: unknown
      /** @enum {string} */
      github_project_visibility?: 'public' | 'internal' | 'private'
      github_repo?: string
      github_repo_is_template?: boolean
      github_template_repo?: string
      github_topics?: unknown
      id?: number
      jira_project_keys?: unknown
      language?: string
      latest_commit?: components['schemas']['PropertiesCommitComponent']
      locale?: string
      localizations?: {
        documentId?: string
        id?: number
      }[]
      name: string
      part_of_monorepo?: boolean
      path_to_helm_dir?: string
      path_to_project?: string
      product?: {
        documentId?: string
        id?: number
      }
      /** Format: date-time */
      publishedAt?: string
      slack_channel_nonprod_release_notify?: string
      slack_channel_prod_release_notify?: string
      slack_channel_security_scans_notify?: string
      standards_compliance?: unknown
      title?: string
      /** Format: date-time */
      updatedAt?: string
      updatedBy?: {
        documentId?: string
        id?: number
      }
      veracode_exempt?: boolean
      veracode_last_completed_scan_date?: string
      veracode_policy_rules_status?: string
      veracode_results_summary?: unknown
      veracode_results_url?: string
      versions?: unknown
    }
    ComponentListResponse: {
      data?: components['schemas']['Component'][]
      meta?: {
        pagination?: {
          page?: number
          pageCount?: number
          pageSize?: number
          total?: number
        }
      }
    }
    ComponentRequest: {
      data: {
        api?: boolean
        app_insights_cloud_role_name?: string
        archived?: boolean
        codescanning_summary?: unknown
        container_image?: string
        description?: string
        disabled_workflows?: unknown
        envs?: (number | string)[]
        frontend?: boolean
        github_enforce_admins_enabled?: boolean
        github_only?: boolean
        github_project_branch_protection_restricted_teams?: unknown
        github_project_teams_admin?: unknown
        github_project_teams_maintain?: unknown
        github_project_teams_write?: unknown
        /** @enum {string} */
        github_project_visibility?: 'public' | 'internal' | 'private'
        github_repo?: string
        github_repo_is_template?: boolean
        github_template_repo?: string
        github_topics?: unknown
        jira_project_keys?: unknown
        language?: string
        latest_commit?: components['schemas']['PropertiesCommitComponent']
        locale?: string
        localizations?: (number | string)[]
        name: string
        part_of_monorepo?: boolean
        path_to_helm_dir?: string
        path_to_project?: string
        /** @example string or id */
        product?: number | string
        slack_channel_nonprod_release_notify?: string
        slack_channel_prod_release_notify?: string
        slack_channel_security_scans_notify?: string
        standards_compliance?: unknown
        title?: string
        veracode_exempt?: boolean
        veracode_last_completed_scan_date?: string
        veracode_policy_rules_status?: string
        veracode_results_summary?: unknown
        veracode_results_url?: string
        versions?: unknown
      }
    }
    ComponentResponse: {
      data?: components['schemas']['Component']
      meta?: Record<string, never>
    }
    CpNamespaceRequest: {
      certificate_dns_name?: string
      /** Format: date-time */
      createdAt?: string
      createdBy?: {
        blocked?: boolean
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        documentId?: string
        /** Format: email */
        email?: string
        firstname?: string
        id?: number
        isActive?: boolean
        lastname?: string
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        preferedLanguage?: string
        /** Format: date-time */
        publishedAt?: string
        registrationToken?: string
        resetPasswordToken?: string
        roles?: {
          code?: string
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          description?: string
          documentId?: string
          id?: number
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          permissions?: {
            action?: string
            actionParameters?: unknown
            conditions?: unknown
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            id?: number
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            properties?: unknown
            /** Format: date-time */
            publishedAt?: string
            role?: {
              documentId?: string
              id?: number
            }
            subject?: string
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }[]
          /** Format: date-time */
          publishedAt?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
          users?: {
            documentId?: string
            id?: number
          }[]
        }[]
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
        username?: string
      }
      documentId?: string
      env_name?: string
      id?: number
      is_production?: boolean
      locale?: string
      localizations?: {
        certificate_dns_name?: string
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        documentId?: string
        env_name?: string
        id?: number
        is_production?: boolean
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        namespace?: string
        /** Format: date-time */
        publishedAt?: string
        request_github_pr_number?: number
        request_github_pr_status?: string
        requester_email?: string
        requester_name?: string
        requester_team?: string
        secret_name?: string
        source_code?: string
        /** @enum {string} */
        type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
      }[]
      namespace?: string
      /** Format: date-time */
      publishedAt?: string
      request_github_pr_number?: number
      request_github_pr_status?: string
      requester_email?: string
      requester_name?: string
      requester_team?: string
      secret_name?: string
      source_code?: string
      /** @enum {string} */
      type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
      /** Format: date-time */
      updatedAt?: string
      updatedBy?: {
        documentId?: string
        id?: number
      }
    }
    CpNamespaceRequestListResponse: {
      data?: components['schemas']['CpNamespaceRequest'][]
      meta?: {
        pagination?: {
          page?: number
          pageCount?: number
          pageSize?: number
          total?: number
        }
      }
    }
    CpNamespaceRequestRequest: {
      data: {
        certificate_dns_name?: string
        env_name?: string
        is_production?: boolean
        locale?: string
        localizations?: (number | string)[]
        namespace?: string
        request_github_pr_number?: number
        request_github_pr_status?: string
        requester_email?: string
        requester_name?: string
        requester_team?: string
        secret_name?: string
        source_code?: string
        /** @enum {string} */
        type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
      }
    }
    CpNamespaceRequestResponse: {
      data?: components['schemas']['CpNamespaceRequest']
      meta?: Record<string, never>
    }
    CustomComponentView: {
      components?: {
        api?: boolean
        app_insights_cloud_role_name?: string
        archived?: boolean
        codescanning_summary?: unknown
        container_image?: string
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        description?: string
        disabled_workflows?: unknown
        documentId?: string
        envs?: {
          active_agencies?: unknown
          alert_severity_label?: string
          alerts_slack_channel?: string
          build_image_tag?: string
          cluster?: string
          component?: {
            documentId?: string
            id?: number
          }
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          documentId?: string
          health_path?: string
          id?: number
          include_in_subject_access_requests?: boolean
          info_path?: string
          ip_allow_list?: unknown
          ip_allow_list_enabled?: boolean
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          manually_managed?: boolean
          modsecurity_audit_enabled?: boolean
          modsecurity_enabled?: boolean
          modsecurity_snippet?: string
          monitor?: boolean
          name?: string
          namespace?: string
          ns?: {
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              blocked?: boolean
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                documentId?: string
                id?: number
              }
              documentId?: string
              /** Format: email */
              email?: string
              firstname?: string
              id?: number
              isActive?: boolean
              lastname?: string
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              preferedLanguage?: string
              /** Format: date-time */
              publishedAt?: string
              registrationToken?: string
              resetPasswordToken?: string
              roles?: {
                code?: string
                /** Format: date-time */
                createdAt?: string
                createdBy?: {
                  documentId?: string
                  id?: number
                }
                description?: string
                documentId?: string
                id?: number
                locale?: string
                localizations?: {
                  documentId?: string
                  id?: number
                }[]
                name?: string
                permissions?: {
                  action?: string
                  actionParameters?: unknown
                  conditions?: unknown
                  /** Format: date-time */
                  createdAt?: string
                  createdBy?: {
                    documentId?: string
                    id?: number
                  }
                  documentId?: string
                  id?: number
                  locale?: string
                  localizations?: {
                    documentId?: string
                    id?: number
                  }[]
                  properties?: unknown
                  /** Format: date-time */
                  publishedAt?: string
                  role?: {
                    documentId?: string
                    id?: number
                  }
                  subject?: string
                  /** Format: date-time */
                  updatedAt?: string
                  updatedBy?: {
                    documentId?: string
                    id?: number
                  }
                }[]
                /** Format: date-time */
                publishedAt?: string
                /** Format: date-time */
                updatedAt?: string
                updatedBy?: {
                  documentId?: string
                  id?: number
                }
                users?: {
                  documentId?: string
                  id?: number
                }[]
              }[]
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
              username?: string
            }
            documentId?: string
            elasticache_cluster?: components['schemas']['TfModulesElasticacheClusterComponent'][]
            hmpps_template?: components['schemas']['TfModulesHmppsTerraformTemplateComponent'][]
            id?: number
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            name?: string
            pingdom_check?: components['schemas']['TfModulesPingdomCheckComponent'][]
            /** Format: date-time */
            publishedAt?: string
            rds_instance?: components['schemas']['TfModulesRdsInstanceComponent'][]
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }
          pingdom_paused?: boolean
          pingdom_sre_managed?: boolean
          /** Format: date-time */
          publishedAt?: string
          swagger_docs?: string
          trivy_scan?: {
            build_image_tag?: string
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            environments?: unknown
            id?: number
            image_id?: string
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            name?: string
            /** Format: date-time */
            publishedAt?: string
            /** @enum {string} */
            scan_status?: 'Failed' | 'Succeeded'
            scan_summary?: unknown
            trivy_scan_timestamp?: string
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }
          /** @enum {string} */
          type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
          url?: string
        }[]
        frontend?: boolean
        github_enforce_admins_enabled?: boolean
        github_only?: boolean
        github_project_branch_protection_restricted_teams?: unknown
        github_project_teams_admin?: unknown
        github_project_teams_maintain?: unknown
        github_project_teams_write?: unknown
        /** @enum {string} */
        github_project_visibility?: 'public' | 'internal' | 'private'
        github_repo?: string
        github_repo_is_template?: boolean
        github_template_repo?: string
        github_topics?: unknown
        id?: number
        jira_project_keys?: unknown
        language?: string
        latest_commit?: components['schemas']['PropertiesCommitComponent']
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        name?: string
        part_of_monorepo?: boolean
        path_to_helm_dir?: string
        path_to_project?: string
        product?: {
          children?: {
            documentId?: string
            id?: number
          }[]
          components?: {
            documentId?: string
            id?: number
          }[]
          confluence_link?: string
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          delivery_manager?: string
          description?: string
          documentId?: string
          gdrive_link?: string
          id?: number
          lead_developer?: string
          legacy?: boolean
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          p_id?: string
          parent?: {
            documentId?: string
            id?: number
          }
          phase?: string
          product_manager?: string
          product_set?: {
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            id?: number
            lead_developer?: string
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            name?: string
            products?: {
              documentId?: string
              id?: number
            }[]
            ps_id?: string
            /** Format: date-time */
            publishedAt?: string
            slug?: string
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }
          /** Format: date-time */
          publishedAt?: string
          service_area?: {
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            id?: number
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            name?: string
            owner?: string
            products?: {
              documentId?: string
              id?: number
            }[]
            /** Format: date-time */
            publishedAt?: string
            sa_id?: string
            slug?: string
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }
          slack_channel_id?: string
          slack_channel_name?: string
          slug?: string
          subproduct?: boolean
          team?: {
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            id?: number
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            name?: string
            products?: {
              documentId?: string
              id?: number
            }[]
            /** Format: date-time */
            publishedAt?: string
            slack_channel_id?: string
            slack_channel_name?: string
            slug?: string
            t_id?: string
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
        }
        /** Format: date-time */
        publishedAt?: string
        slack_channel_nonprod_release_notify?: string
        slack_channel_prod_release_notify?: string
        slack_channel_security_scans_notify?: string
        standards_compliance?: unknown
        title?: string
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
        veracode_exempt?: boolean
        veracode_last_completed_scan_date?: string
        veracode_policy_rules_status?: string
        veracode_results_summary?: unknown
        veracode_results_url?: string
        versions?: unknown
      }[]
      /** Format: date-time */
      createdAt?: string
      createdBy?: {
        documentId?: string
        id?: number
      }
      documentId?: string
      id?: number
      locale?: string
      localizations?: {
        components?: {
          documentId?: string
          id?: number
        }[]
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        documentId?: string
        id?: number
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        name?: string
        /** Format: date-time */
        publishedAt?: string
        slug?: string
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
      }[]
      name: string
      /** Format: date-time */
      publishedAt?: string
      slug?: string
      /** Format: date-time */
      updatedAt?: string
      updatedBy?: {
        documentId?: string
        id?: number
      }
    }
    CustomComponentViewListResponse: {
      data?: components['schemas']['CustomComponentView'][]
      meta?: {
        pagination?: {
          page?: number
          pageCount?: number
          pageSize?: number
          total?: number
        }
      }
    }
    CustomComponentViewRequest: {
      data: {
        components?: (number | string)[]
        locale?: string
        localizations?: (number | string)[]
        name: string
        slug?: string
      }
    }
    CustomComponentViewResponse: {
      data?: components['schemas']['CustomComponentView']
      meta?: Record<string, never>
    }
    Environment: {
      active_agencies?: unknown
      alert_severity_label?: string
      alerts_slack_channel?: string
      build_image_tag?: string
      cluster?: string
      component?: {
        api?: boolean
        app_insights_cloud_role_name?: string
        archived?: boolean
        codescanning_summary?: unknown
        container_image?: string
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        description?: string
        disabled_workflows?: unknown
        documentId?: string
        envs?: {
          active_agencies?: unknown
          alert_severity_label?: string
          alerts_slack_channel?: string
          build_image_tag?: string
          cluster?: string
          component?: {
            documentId?: string
            id?: number
          }
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          documentId?: string
          health_path?: string
          id?: number
          include_in_subject_access_requests?: boolean
          info_path?: string
          ip_allow_list?: unknown
          ip_allow_list_enabled?: boolean
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          manually_managed?: boolean
          modsecurity_audit_enabled?: boolean
          modsecurity_enabled?: boolean
          modsecurity_snippet?: string
          monitor?: boolean
          name?: string
          namespace?: string
          ns?: {
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              blocked?: boolean
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                documentId?: string
                id?: number
              }
              documentId?: string
              /** Format: email */
              email?: string
              firstname?: string
              id?: number
              isActive?: boolean
              lastname?: string
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              preferedLanguage?: string
              /** Format: date-time */
              publishedAt?: string
              registrationToken?: string
              resetPasswordToken?: string
              roles?: {
                code?: string
                /** Format: date-time */
                createdAt?: string
                createdBy?: {
                  documentId?: string
                  id?: number
                }
                description?: string
                documentId?: string
                id?: number
                locale?: string
                localizations?: {
                  documentId?: string
                  id?: number
                }[]
                name?: string
                permissions?: {
                  action?: string
                  actionParameters?: unknown
                  conditions?: unknown
                  /** Format: date-time */
                  createdAt?: string
                  createdBy?: {
                    documentId?: string
                    id?: number
                  }
                  documentId?: string
                  id?: number
                  locale?: string
                  localizations?: {
                    documentId?: string
                    id?: number
                  }[]
                  properties?: unknown
                  /** Format: date-time */
                  publishedAt?: string
                  role?: {
                    documentId?: string
                    id?: number
                  }
                  subject?: string
                  /** Format: date-time */
                  updatedAt?: string
                  updatedBy?: {
                    documentId?: string
                    id?: number
                  }
                }[]
                /** Format: date-time */
                publishedAt?: string
                /** Format: date-time */
                updatedAt?: string
                updatedBy?: {
                  documentId?: string
                  id?: number
                }
                users?: {
                  documentId?: string
                  id?: number
                }[]
              }[]
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
              username?: string
            }
            documentId?: string
            elasticache_cluster?: components['schemas']['TfModulesElasticacheClusterComponent'][]
            hmpps_template?: components['schemas']['TfModulesHmppsTerraformTemplateComponent'][]
            id?: number
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            name?: string
            pingdom_check?: components['schemas']['TfModulesPingdomCheckComponent'][]
            /** Format: date-time */
            publishedAt?: string
            rds_instance?: components['schemas']['TfModulesRdsInstanceComponent'][]
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }
          pingdom_paused?: boolean
          pingdom_sre_managed?: boolean
          /** Format: date-time */
          publishedAt?: string
          swagger_docs?: string
          trivy_scan?: {
            build_image_tag?: string
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            environments?: unknown
            id?: number
            image_id?: string
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            name?: string
            /** Format: date-time */
            publishedAt?: string
            /** @enum {string} */
            scan_status?: 'Failed' | 'Succeeded'
            scan_summary?: unknown
            trivy_scan_timestamp?: string
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }
          /** @enum {string} */
          type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
          url?: string
        }[]
        frontend?: boolean
        github_enforce_admins_enabled?: boolean
        github_only?: boolean
        github_project_branch_protection_restricted_teams?: unknown
        github_project_teams_admin?: unknown
        github_project_teams_maintain?: unknown
        github_project_teams_write?: unknown
        /** @enum {string} */
        github_project_visibility?: 'public' | 'internal' | 'private'
        github_repo?: string
        github_repo_is_template?: boolean
        github_template_repo?: string
        github_topics?: unknown
        id?: number
        jira_project_keys?: unknown
        language?: string
        latest_commit?: components['schemas']['PropertiesCommitComponent']
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        name?: string
        part_of_monorepo?: boolean
        path_to_helm_dir?: string
        path_to_project?: string
        product?: {
          children?: {
            documentId?: string
            id?: number
          }[]
          components?: {
            documentId?: string
            id?: number
          }[]
          confluence_link?: string
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          delivery_manager?: string
          description?: string
          documentId?: string
          gdrive_link?: string
          id?: number
          lead_developer?: string
          legacy?: boolean
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          p_id?: string
          parent?: {
            documentId?: string
            id?: number
          }
          phase?: string
          product_manager?: string
          product_set?: {
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            id?: number
            lead_developer?: string
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            name?: string
            products?: {
              documentId?: string
              id?: number
            }[]
            ps_id?: string
            /** Format: date-time */
            publishedAt?: string
            slug?: string
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }
          /** Format: date-time */
          publishedAt?: string
          service_area?: {
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            id?: number
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            name?: string
            owner?: string
            products?: {
              documentId?: string
              id?: number
            }[]
            /** Format: date-time */
            publishedAt?: string
            sa_id?: string
            slug?: string
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }
          slack_channel_id?: string
          slack_channel_name?: string
          slug?: string
          subproduct?: boolean
          team?: {
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            id?: number
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            name?: string
            products?: {
              documentId?: string
              id?: number
            }[]
            /** Format: date-time */
            publishedAt?: string
            slack_channel_id?: string
            slack_channel_name?: string
            slug?: string
            t_id?: string
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
        }
        /** Format: date-time */
        publishedAt?: string
        slack_channel_nonprod_release_notify?: string
        slack_channel_prod_release_notify?: string
        slack_channel_security_scans_notify?: string
        standards_compliance?: unknown
        title?: string
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
        veracode_exempt?: boolean
        veracode_last_completed_scan_date?: string
        veracode_policy_rules_status?: string
        veracode_results_summary?: unknown
        veracode_results_url?: string
        versions?: unknown
      }
      /** Format: date-time */
      createdAt?: string
      createdBy?: {
        documentId?: string
        id?: number
      }
      documentId?: string
      health_path?: string
      id?: number
      include_in_subject_access_requests?: boolean
      info_path?: string
      ip_allow_list?: unknown
      ip_allow_list_enabled?: boolean
      locale?: string
      localizations?: {
        documentId?: string
        id?: number
      }[]
      manually_managed?: boolean
      modsecurity_audit_enabled?: boolean
      modsecurity_enabled?: boolean
      modsecurity_snippet?: string
      monitor?: boolean
      name: string
      namespace?: string
      ns?: {
        documentId?: string
        id?: number
      }
      pingdom_paused?: boolean
      pingdom_sre_managed?: boolean
      /** Format: date-time */
      publishedAt?: string
      swagger_docs?: string
      trivy_scan?: {
        documentId?: string
        id?: number
      }
      /** @enum {string} */
      type: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
      /** Format: date-time */
      updatedAt?: string
      updatedBy?: {
        documentId?: string
        id?: number
      }
      url?: string
    }
    EnvironmentListResponse: {
      data?: components['schemas']['Environment'][]
      meta?: {
        pagination?: {
          page?: number
          pageCount?: number
          pageSize?: number
          total?: number
        }
      }
    }
    EnvironmentRequest: {
      data: {
        active_agencies?: unknown
        alert_severity_label?: string
        alerts_slack_channel?: string
        build_image_tag?: string
        cluster?: string
        /** @example string or id */
        component?: number | string
        health_path?: string
        include_in_subject_access_requests?: boolean
        info_path?: string
        ip_allow_list?: unknown
        ip_allow_list_enabled?: boolean
        locale?: string
        localizations?: (number | string)[]
        manually_managed?: boolean
        modsecurity_audit_enabled?: boolean
        modsecurity_enabled?: boolean
        modsecurity_snippet?: string
        monitor?: boolean
        name: string
        namespace?: string
        /** @example string or id */
        ns?: number | string
        pingdom_paused?: boolean
        pingdom_sre_managed?: boolean
        swagger_docs?: string
        /** @example string or id */
        trivy_scan?: number | string
        /** @enum {string} */
        type: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
        url?: string
      }
    }
    EnvironmentResponse: {
      data?: components['schemas']['Environment']
      meta?: Record<string, never>
    }
    Error: {
      data?: (Record<string, never> | Record<string, never>[]) | null
      error: {
        details?: Record<string, never>
        message?: string
        name?: string
        status?: number
      }
    }
    GithubRepoRequest: {
      alerts_nonprod_slack_channel?: string
      alerts_prod_slack_channel?: string
      base_template?: string
      /** Format: date-time */
      createdAt?: string
      createdBy?: {
        blocked?: boolean
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        documentId?: string
        /** Format: email */
        email?: string
        firstname?: string
        id?: number
        isActive?: boolean
        lastname?: string
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        preferedLanguage?: string
        /** Format: date-time */
        publishedAt?: string
        registrationToken?: string
        resetPasswordToken?: string
        roles?: {
          code?: string
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          description?: string
          documentId?: string
          id?: number
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          permissions?: {
            action?: string
            actionParameters?: unknown
            conditions?: unknown
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            id?: number
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            properties?: unknown
            /** Format: date-time */
            publishedAt?: string
            role?: {
              documentId?: string
              id?: number
            }
            subject?: string
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }[]
          /** Format: date-time */
          publishedAt?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
          users?: {
            documentId?: string
            id?: number
          }[]
        }[]
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
        username?: string
      }
      documentId?: string
      github_project_branch_protection_restricted_teams?: unknown
      github_project_teams_write?: unknown
      /** @enum {string} */
      github_project_visibility?: 'public' | 'internal' | 'private'
      github_projects_teams_admin?: unknown
      github_repo?: string
      id?: number
      jira_project_keys?: unknown
      locale?: string
      localizations?: {
        alerts_nonprod_slack_channel?: string
        alerts_prod_slack_channel?: string
        base_template?: string
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        documentId?: string
        github_project_branch_protection_restricted_teams?: unknown
        github_project_teams_write?: unknown
        /** @enum {string} */
        github_project_visibility?: 'public' | 'internal' | 'private'
        github_projects_teams_admin?: unknown
        github_repo?: string
        id?: number
        jira_project_keys?: unknown
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        namespace?: string
        nonprod_alerts_severity_label?: string
        prod_alerts_severity_label?: string
        product?: string
        /** Format: date-time */
        publishedAt?: string
        repo_description?: string
        request_github_pr_number?: number
        request_github_pr_status?: string
        /** @enum {string} */
        request_type?: string
        requester_email?: string
        requester_name?: string
        requester_team?: string
        slack_channel_nonprod_release_notify?: string
        slack_channel_prod_release_notify?: string
        slack_channel_security_scans_notify?: string
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
      }[]
      namespace?: string
      nonprod_alerts_severity_label?: string
      prod_alerts_severity_label?: string
      product?: string
      /** Format: date-time */
      publishedAt?: string
      repo_description?: string
      request_github_pr_number?: number
      request_github_pr_status?: string
      /** @enum {string} */
      request_type?: string
      requester_email?: string
      requester_name?: string
      requester_team?: string
      slack_channel_nonprod_release_notify?: string
      slack_channel_prod_release_notify?: string
      slack_channel_security_scans_notify?: string
      /** Format: date-time */
      updatedAt?: string
      updatedBy?: {
        documentId?: string
        id?: number
      }
    }
    GithubRepoRequestListResponse: {
      data?: components['schemas']['GithubRepoRequest'][]
      meta?: {
        pagination?: {
          page?: number
          pageCount?: number
          pageSize?: number
          total?: number
        }
      }
    }
    GithubRepoRequestRequest: {
      data: {
        alerts_nonprod_slack_channel?: string
        alerts_prod_slack_channel?: string
        base_template?: string
        github_project_branch_protection_restricted_teams?: unknown
        github_project_teams_write?: unknown
        /** @enum {string} */
        github_project_visibility?: 'public' | 'internal' | 'private'
        github_projects_teams_admin?: unknown
        github_repo?: string
        jira_project_keys?: unknown
        locale?: string
        localizations?: (number | string)[]
        namespace?: string
        nonprod_alerts_severity_label?: string
        prod_alerts_severity_label?: string
        product?: string
        repo_description?: string
        request_github_pr_number?: number
        request_github_pr_status?: string
        /** @enum {string} */
        request_type?: string
        requester_email?: string
        requester_name?: string
        requester_team?: string
        slack_channel_nonprod_release_notify?: string
        slack_channel_prod_release_notify?: string
        slack_channel_security_scans_notify?: string
      }
    }
    GithubRepoRequestResponse: {
      data?: components['schemas']['GithubRepoRequest']
      meta?: Record<string, never>
    }
    GithubTeam: {
      /** Format: date-time */
      createdAt?: string
      createdBy?: {
        blocked?: boolean
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        documentId?: string
        /** Format: email */
        email?: string
        firstname?: string
        id?: number
        isActive?: boolean
        lastname?: string
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        preferedLanguage?: string
        /** Format: date-time */
        publishedAt?: string
        registrationToken?: string
        resetPasswordToken?: string
        roles?: {
          code?: string
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          description?: string
          documentId?: string
          id?: number
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          permissions?: {
            action?: string
            actionParameters?: unknown
            conditions?: unknown
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            id?: number
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            properties?: unknown
            /** Format: date-time */
            publishedAt?: string
            role?: {
              documentId?: string
              id?: number
            }
            subject?: string
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }[]
          /** Format: date-time */
          publishedAt?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
          users?: {
            documentId?: string
            id?: number
          }[]
        }[]
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
        username?: string
      }
      documentId?: string
      github_team_id?: number
      id?: number
      locale?: string
      localizations?: {
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        documentId?: string
        github_team_id?: number
        id?: number
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        members?: unknown
        parent_team_name?: string
        /** Format: date-time */
        publishedAt?: string
        team_desc?: string
        team_name?: string
        terraform_managed?: boolean
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
      }[]
      members?: unknown
      parent_team_name?: string
      /** Format: date-time */
      publishedAt?: string
      team_desc?: string
      team_name?: string
      terraform_managed?: boolean
      /** Format: date-time */
      updatedAt?: string
      updatedBy?: {
        documentId?: string
        id?: number
      }
    }
    GithubTeamListResponse: {
      data?: components['schemas']['GithubTeam'][]
      meta?: {
        pagination?: {
          page?: number
          pageCount?: number
          pageSize?: number
          total?: number
        }
      }
    }
    GithubTeamRequest: {
      data: {
        github_team_id?: number
        locale?: string
        localizations?: (number | string)[]
        members?: unknown
        parent_team_name?: string
        team_desc?: string
        team_name?: string
        terraform_managed?: boolean
      }
    }
    GithubTeamResponse: {
      data?: components['schemas']['GithubTeam']
      meta?: Record<string, never>
    }
    Namespace: {
      /** Format: date-time */
      createdAt?: string
      createdBy?: {
        blocked?: boolean
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        documentId?: string
        /** Format: email */
        email?: string
        firstname?: string
        id?: number
        isActive?: boolean
        lastname?: string
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        preferedLanguage?: string
        /** Format: date-time */
        publishedAt?: string
        registrationToken?: string
        resetPasswordToken?: string
        roles?: {
          code?: string
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          description?: string
          documentId?: string
          id?: number
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          permissions?: {
            action?: string
            actionParameters?: unknown
            conditions?: unknown
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            id?: number
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            properties?: unknown
            /** Format: date-time */
            publishedAt?: string
            role?: {
              documentId?: string
              id?: number
            }
            subject?: string
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }[]
          /** Format: date-time */
          publishedAt?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
          users?: {
            documentId?: string
            id?: number
          }[]
        }[]
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
        username?: string
      }
      documentId?: string
      elasticache_cluster?: components['schemas']['TfModulesElasticacheClusterComponent'][]
      hmpps_template?: components['schemas']['TfModulesHmppsTerraformTemplateComponent'][]
      id?: number
      locale?: string
      localizations?: {
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        documentId?: string
        elasticache_cluster?: components['schemas']['TfModulesElasticacheClusterComponent'][]
        hmpps_template?: components['schemas']['TfModulesHmppsTerraformTemplateComponent'][]
        id?: number
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        name?: string
        pingdom_check?: components['schemas']['TfModulesPingdomCheckComponent'][]
        /** Format: date-time */
        publishedAt?: string
        rds_instance?: components['schemas']['TfModulesRdsInstanceComponent'][]
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
      }[]
      name: string
      pingdom_check?: components['schemas']['TfModulesPingdomCheckComponent'][]
      /** Format: date-time */
      publishedAt?: string
      rds_instance?: components['schemas']['TfModulesRdsInstanceComponent'][]
      /** Format: date-time */
      updatedAt?: string
      updatedBy?: {
        documentId?: string
        id?: number
      }
    }
    NamespaceListResponse: {
      data?: components['schemas']['Namespace'][]
      meta?: {
        pagination?: {
          page?: number
          pageCount?: number
          pageSize?: number
          total?: number
        }
      }
    }
    NamespaceRequest: {
      data: {
        elasticache_cluster?: components['schemas']['TfModulesElasticacheClusterComponent'][]
        hmpps_template?: components['schemas']['TfModulesHmppsTerraformTemplateComponent'][]
        locale?: string
        localizations?: (number | string)[]
        name: string
        pingdom_check?: components['schemas']['TfModulesPingdomCheckComponent'][]
        rds_instance?: components['schemas']['TfModulesRdsInstanceComponent'][]
      }
    }
    NamespaceResponse: {
      data?: components['schemas']['Namespace']
      meta?: Record<string, never>
    }
    Product: {
      children?: {
        documentId?: string
        id?: number
      }[]
      components?: {
        documentId?: string
        id?: number
      }[]
      confluence_link?: string
      /** Format: date-time */
      createdAt?: string
      createdBy?: {
        documentId?: string
        id?: number
      }
      delivery_manager?: string
      description?: string
      documentId?: string
      gdrive_link?: string
      id?: number
      lead_developer?: string
      legacy?: boolean
      locale?: string
      localizations?: {
        documentId?: string
        id?: number
      }[]
      name: string
      p_id: string
      parent?: {
        children?: {
          documentId?: string
          id?: number
        }[]
        components?: {
          api?: boolean
          app_insights_cloud_role_name?: string
          archived?: boolean
          codescanning_summary?: unknown
          container_image?: string
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          description?: string
          disabled_workflows?: unknown
          documentId?: string
          envs?: {
            active_agencies?: unknown
            alert_severity_label?: string
            alerts_slack_channel?: string
            build_image_tag?: string
            cluster?: string
            component?: {
              documentId?: string
              id?: number
            }
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            health_path?: string
            id?: number
            include_in_subject_access_requests?: boolean
            info_path?: string
            ip_allow_list?: unknown
            ip_allow_list_enabled?: boolean
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            manually_managed?: boolean
            modsecurity_audit_enabled?: boolean
            modsecurity_enabled?: boolean
            modsecurity_snippet?: string
            monitor?: boolean
            name?: string
            namespace?: string
            ns?: {
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                documentId?: string
                id?: number
              }
              documentId?: string
              elasticache_cluster?: components['schemas']['TfModulesElasticacheClusterComponent'][]
              hmpps_template?: components['schemas']['TfModulesHmppsTerraformTemplateComponent'][]
              id?: number
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              name?: string
              pingdom_check?: components['schemas']['TfModulesPingdomCheckComponent'][]
              /** Format: date-time */
              publishedAt?: string
              rds_instance?: components['schemas']['TfModulesRdsInstanceComponent'][]
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
            }
            pingdom_paused?: boolean
            pingdom_sre_managed?: boolean
            /** Format: date-time */
            publishedAt?: string
            swagger_docs?: string
            trivy_scan?: {
              build_image_tag?: string
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                documentId?: string
                id?: number
              }
              documentId?: string
              environments?: unknown
              id?: number
              image_id?: string
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              name?: string
              /** Format: date-time */
              publishedAt?: string
              /** @enum {string} */
              scan_status?: 'Failed' | 'Succeeded'
              scan_summary?: unknown
              trivy_scan_timestamp?: string
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
            }
            /** @enum {string} */
            type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
            url?: string
          }[]
          frontend?: boolean
          github_enforce_admins_enabled?: boolean
          github_only?: boolean
          github_project_branch_protection_restricted_teams?: unknown
          github_project_teams_admin?: unknown
          github_project_teams_maintain?: unknown
          github_project_teams_write?: unknown
          /** @enum {string} */
          github_project_visibility?: 'public' | 'internal' | 'private'
          github_repo?: string
          github_repo_is_template?: boolean
          github_template_repo?: string
          github_topics?: unknown
          id?: number
          jira_project_keys?: unknown
          language?: string
          latest_commit?: components['schemas']['PropertiesCommitComponent']
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          part_of_monorepo?: boolean
          path_to_helm_dir?: string
          path_to_project?: string
          product?: {
            documentId?: string
            id?: number
          }
          /** Format: date-time */
          publishedAt?: string
          slack_channel_nonprod_release_notify?: string
          slack_channel_prod_release_notify?: string
          slack_channel_security_scans_notify?: string
          standards_compliance?: unknown
          title?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
          veracode_exempt?: boolean
          veracode_last_completed_scan_date?: string
          veracode_policy_rules_status?: string
          veracode_results_summary?: unknown
          veracode_results_url?: string
          versions?: unknown
        }[]
        confluence_link?: string
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        delivery_manager?: string
        description?: string
        documentId?: string
        gdrive_link?: string
        id?: number
        lead_developer?: string
        legacy?: boolean
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        name?: string
        p_id?: string
        parent?: {
          documentId?: string
          id?: number
        }
        phase?: string
        product_manager?: string
        product_set?: {
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          documentId?: string
          id?: number
          lead_developer?: string
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          products?: {
            documentId?: string
            id?: number
          }[]
          ps_id?: string
          /** Format: date-time */
          publishedAt?: string
          slug?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
        }
        /** Format: date-time */
        publishedAt?: string
        service_area?: {
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          documentId?: string
          id?: number
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          owner?: string
          products?: {
            documentId?: string
            id?: number
          }[]
          /** Format: date-time */
          publishedAt?: string
          sa_id?: string
          slug?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
        }
        slack_channel_id?: string
        slack_channel_name?: string
        slug?: string
        subproduct?: boolean
        team?: {
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            blocked?: boolean
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            /** Format: email */
            email?: string
            firstname?: string
            id?: number
            isActive?: boolean
            lastname?: string
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            preferedLanguage?: string
            /** Format: date-time */
            publishedAt?: string
            registrationToken?: string
            resetPasswordToken?: string
            roles?: {
              code?: string
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                documentId?: string
                id?: number
              }
              description?: string
              documentId?: string
              id?: number
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              name?: string
              permissions?: {
                action?: string
                actionParameters?: unknown
                conditions?: unknown
                /** Format: date-time */
                createdAt?: string
                createdBy?: {
                  documentId?: string
                  id?: number
                }
                documentId?: string
                id?: number
                locale?: string
                localizations?: {
                  documentId?: string
                  id?: number
                }[]
                properties?: unknown
                /** Format: date-time */
                publishedAt?: string
                role?: {
                  documentId?: string
                  id?: number
                }
                subject?: string
                /** Format: date-time */
                updatedAt?: string
                updatedBy?: {
                  documentId?: string
                  id?: number
                }
              }[]
              /** Format: date-time */
              publishedAt?: string
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
              users?: {
                documentId?: string
                id?: number
              }[]
            }[]
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
            username?: string
          }
          documentId?: string
          id?: number
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          products?: {
            documentId?: string
            id?: number
          }[]
          /** Format: date-time */
          publishedAt?: string
          slack_channel_id?: string
          slack_channel_name?: string
          slug?: string
          t_id?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
        }
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
      }
      phase?: string
      product_manager?: string
      product_set?: {
        documentId?: string
        id?: number
      }
      /** Format: date-time */
      publishedAt?: string
      service_area?: {
        documentId?: string
        id?: number
      }
      slack_channel_id?: string
      slack_channel_name?: string
      slug?: string
      subproduct?: boolean
      team?: {
        documentId?: string
        id?: number
      }
      /** Format: date-time */
      updatedAt?: string
      updatedBy?: {
        documentId?: string
        id?: number
      }
    }
    ProductListResponse: {
      data?: components['schemas']['Product'][]
      meta?: {
        pagination?: {
          page?: number
          pageCount?: number
          pageSize?: number
          total?: number
        }
      }
    }
    ProductRequest: {
      data: {
        children?: (number | string)[]
        components?: (number | string)[]
        confluence_link?: string
        delivery_manager?: string
        description?: string
        gdrive_link?: string
        lead_developer?: string
        legacy?: boolean
        locale?: string
        localizations?: (number | string)[]
        name: string
        p_id: string
        /** @example string or id */
        parent?: number | string
        phase?: string
        product_manager?: string
        /** @example string or id */
        product_set?: number | string
        /** @example string or id */
        service_area?: number | string
        slack_channel_id?: string
        slack_channel_name?: string
        slug?: string
        subproduct?: boolean
        /** @example string or id */
        team?: number | string
      }
    }
    ProductResponse: {
      data?: components['schemas']['Product']
      meta?: Record<string, never>
    }
    ProductSet: {
      /** Format: date-time */
      createdAt?: string
      createdBy?: {
        documentId?: string
        id?: number
      }
      documentId?: string
      id?: number
      lead_developer?: string
      locale?: string
      localizations?: {
        documentId?: string
        id?: number
      }[]
      name: string
      products?: {
        children?: {
          documentId?: string
          id?: number
        }[]
        components?: {
          api?: boolean
          app_insights_cloud_role_name?: string
          archived?: boolean
          codescanning_summary?: unknown
          container_image?: string
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          description?: string
          disabled_workflows?: unknown
          documentId?: string
          envs?: {
            active_agencies?: unknown
            alert_severity_label?: string
            alerts_slack_channel?: string
            build_image_tag?: string
            cluster?: string
            component?: {
              documentId?: string
              id?: number
            }
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            health_path?: string
            id?: number
            include_in_subject_access_requests?: boolean
            info_path?: string
            ip_allow_list?: unknown
            ip_allow_list_enabled?: boolean
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            manually_managed?: boolean
            modsecurity_audit_enabled?: boolean
            modsecurity_enabled?: boolean
            modsecurity_snippet?: string
            monitor?: boolean
            name?: string
            namespace?: string
            ns?: {
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                documentId?: string
                id?: number
              }
              documentId?: string
              elasticache_cluster?: components['schemas']['TfModulesElasticacheClusterComponent'][]
              hmpps_template?: components['schemas']['TfModulesHmppsTerraformTemplateComponent'][]
              id?: number
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              name?: string
              pingdom_check?: components['schemas']['TfModulesPingdomCheckComponent'][]
              /** Format: date-time */
              publishedAt?: string
              rds_instance?: components['schemas']['TfModulesRdsInstanceComponent'][]
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
            }
            pingdom_paused?: boolean
            pingdom_sre_managed?: boolean
            /** Format: date-time */
            publishedAt?: string
            swagger_docs?: string
            trivy_scan?: {
              build_image_tag?: string
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                documentId?: string
                id?: number
              }
              documentId?: string
              environments?: unknown
              id?: number
              image_id?: string
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              name?: string
              /** Format: date-time */
              publishedAt?: string
              /** @enum {string} */
              scan_status?: 'Failed' | 'Succeeded'
              scan_summary?: unknown
              trivy_scan_timestamp?: string
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
            }
            /** @enum {string} */
            type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
            url?: string
          }[]
          frontend?: boolean
          github_enforce_admins_enabled?: boolean
          github_only?: boolean
          github_project_branch_protection_restricted_teams?: unknown
          github_project_teams_admin?: unknown
          github_project_teams_maintain?: unknown
          github_project_teams_write?: unknown
          /** @enum {string} */
          github_project_visibility?: 'public' | 'internal' | 'private'
          github_repo?: string
          github_repo_is_template?: boolean
          github_template_repo?: string
          github_topics?: unknown
          id?: number
          jira_project_keys?: unknown
          language?: string
          latest_commit?: components['schemas']['PropertiesCommitComponent']
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          part_of_monorepo?: boolean
          path_to_helm_dir?: string
          path_to_project?: string
          product?: {
            documentId?: string
            id?: number
          }
          /** Format: date-time */
          publishedAt?: string
          slack_channel_nonprod_release_notify?: string
          slack_channel_prod_release_notify?: string
          slack_channel_security_scans_notify?: string
          standards_compliance?: unknown
          title?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
          veracode_exempt?: boolean
          veracode_last_completed_scan_date?: string
          veracode_policy_rules_status?: string
          veracode_results_summary?: unknown
          veracode_results_url?: string
          versions?: unknown
        }[]
        confluence_link?: string
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        delivery_manager?: string
        description?: string
        documentId?: string
        gdrive_link?: string
        id?: number
        lead_developer?: string
        legacy?: boolean
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        name?: string
        p_id?: string
        parent?: {
          documentId?: string
          id?: number
        }
        phase?: string
        product_manager?: string
        product_set?: {
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          documentId?: string
          id?: number
          lead_developer?: string
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          products?: {
            documentId?: string
            id?: number
          }[]
          ps_id?: string
          /** Format: date-time */
          publishedAt?: string
          slug?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
        }
        /** Format: date-time */
        publishedAt?: string
        service_area?: {
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          documentId?: string
          id?: number
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          owner?: string
          products?: {
            documentId?: string
            id?: number
          }[]
          /** Format: date-time */
          publishedAt?: string
          sa_id?: string
          slug?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
        }
        slack_channel_id?: string
        slack_channel_name?: string
        slug?: string
        subproduct?: boolean
        team?: {
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            blocked?: boolean
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            /** Format: email */
            email?: string
            firstname?: string
            id?: number
            isActive?: boolean
            lastname?: string
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            preferedLanguage?: string
            /** Format: date-time */
            publishedAt?: string
            registrationToken?: string
            resetPasswordToken?: string
            roles?: {
              code?: string
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                documentId?: string
                id?: number
              }
              description?: string
              documentId?: string
              id?: number
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              name?: string
              permissions?: {
                action?: string
                actionParameters?: unknown
                conditions?: unknown
                /** Format: date-time */
                createdAt?: string
                createdBy?: {
                  documentId?: string
                  id?: number
                }
                documentId?: string
                id?: number
                locale?: string
                localizations?: {
                  documentId?: string
                  id?: number
                }[]
                properties?: unknown
                /** Format: date-time */
                publishedAt?: string
                role?: {
                  documentId?: string
                  id?: number
                }
                subject?: string
                /** Format: date-time */
                updatedAt?: string
                updatedBy?: {
                  documentId?: string
                  id?: number
                }
              }[]
              /** Format: date-time */
              publishedAt?: string
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
              users?: {
                documentId?: string
                id?: number
              }[]
            }[]
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
            username?: string
          }
          documentId?: string
          id?: number
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          products?: {
            documentId?: string
            id?: number
          }[]
          /** Format: date-time */
          publishedAt?: string
          slack_channel_id?: string
          slack_channel_name?: string
          slug?: string
          t_id?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
        }
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
      }[]
      ps_id: string
      /** Format: date-time */
      publishedAt?: string
      slug?: string
      /** Format: date-time */
      updatedAt?: string
      updatedBy?: {
        documentId?: string
        id?: number
      }
    }
    ProductSetListResponse: {
      data?: components['schemas']['ProductSet'][]
      meta?: {
        pagination?: {
          page?: number
          pageCount?: number
          pageSize?: number
          total?: number
        }
      }
    }
    ProductSetRequest: {
      data: {
        lead_developer?: string
        locale?: string
        localizations?: (number | string)[]
        name: string
        products?: (number | string)[]
        ps_id: string
        slug?: string
      }
    }
    ProductSetResponse: {
      data?: components['schemas']['ProductSet']
      meta?: Record<string, never>
    }
    PropertiesCommitComponent: {
      /** Format: date-time */
      date_time?: string
      id?: number
      sha?: string
    }
    RecommendedVersion: {
      /** Format: date-time */
      createdAt?: string
      createdBy?: {
        blocked?: boolean
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        documentId?: string
        /** Format: email */
        email?: string
        firstname?: string
        id?: number
        isActive?: boolean
        lastname?: string
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        preferedLanguage?: string
        /** Format: date-time */
        publishedAt?: string
        registrationToken?: string
        resetPasswordToken?: string
        roles?: {
          code?: string
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          description?: string
          documentId?: string
          id?: number
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          permissions?: {
            action?: string
            actionParameters?: unknown
            conditions?: unknown
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            id?: number
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            properties?: unknown
            /** Format: date-time */
            publishedAt?: string
            role?: {
              documentId?: string
              id?: number
            }
            subject?: string
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }[]
          /** Format: date-time */
          publishedAt?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
          users?: {
            documentId?: string
            id?: number
          }[]
        }[]
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
        username?: string
      }
      documentId?: string
      id?: number
      locale?: string
      localizations?: {
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        documentId?: string
        id?: number
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        name?: string
        /** Format: date-time */
        publishedAt?: string
        type?: string
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
        version?: string
      }[]
      name?: string
      /** Format: date-time */
      publishedAt?: string
      type?: string
      /** Format: date-time */
      updatedAt?: string
      updatedBy?: {
        documentId?: string
        id?: number
      }
      version?: string
    }
    RecommendedVersionListResponse: {
      data?: components['schemas']['RecommendedVersion'][]
      meta?: {
        pagination?: {
          page?: number
          pageCount?: number
          pageSize?: number
          total?: number
        }
      }
    }
    RecommendedVersionRequest: {
      data: {
        locale?: string
        localizations?: (number | string)[]
        name?: string
        type?: string
        version?: string
      }
    }
    RecommendedVersionResponse: {
      data?: components['schemas']['RecommendedVersion']
      meta?: Record<string, never>
    }
    ScheduledJob: {
      /** Format: date-time */
      createdAt?: string
      createdBy?: {
        blocked?: boolean
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        documentId?: string
        /** Format: email */
        email?: string
        firstname?: string
        id?: number
        isActive?: boolean
        lastname?: string
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        preferedLanguage?: string
        /** Format: date-time */
        publishedAt?: string
        registrationToken?: string
        resetPasswordToken?: string
        roles?: {
          code?: string
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          description?: string
          documentId?: string
          id?: number
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          permissions?: {
            action?: string
            actionParameters?: unknown
            conditions?: unknown
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            id?: number
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            properties?: unknown
            /** Format: date-time */
            publishedAt?: string
            role?: {
              documentId?: string
              id?: number
            }
            subject?: string
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }[]
          /** Format: date-time */
          publishedAt?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
          users?: {
            documentId?: string
            id?: number
          }[]
        }[]
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
        username?: string
      }
      description?: string
      documentId?: string
      error_details?: unknown
      id?: number
      /** Format: date-time */
      last_scheduled_run?: string
      /** Format: date-time */
      last_successful_run?: string
      locale?: string
      localizations?: {
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        description?: string
        documentId?: string
        error_details?: unknown
        id?: number
        /** Format: date-time */
        last_scheduled_run?: string
        /** Format: date-time */
        last_successful_run?: string
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        name?: string
        /** Format: date-time */
        publishedAt?: string
        /** @enum {string} */
        result?: 'None' | 'Succeeded' | 'Failed' | 'Errors'
        schedule?: string
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
      }[]
      name?: string
      /** Format: date-time */
      publishedAt?: string
      /** @enum {string} */
      result?: 'None' | 'Succeeded' | 'Failed' | 'Errors'
      schedule?: string
      /** Format: date-time */
      updatedAt?: string
      updatedBy?: {
        documentId?: string
        id?: number
      }
    }
    ScheduledJobListResponse: {
      data?: components['schemas']['ScheduledJob'][]
      meta?: {
        pagination?: {
          page?: number
          pageCount?: number
          pageSize?: number
          total?: number
        }
      }
    }
    ScheduledJobRequest: {
      data: {
        description?: string
        error_details?: unknown
        /** Format: date-time */
        last_scheduled_run?: string
        /** Format: date-time */
        last_successful_run?: string
        locale?: string
        localizations?: (number | string)[]
        name?: string
        /** @enum {string} */
        result?: 'None' | 'Succeeded' | 'Failed' | 'Errors'
        schedule?: string
      }
    }
    ScheduledJobResponse: {
      data?: components['schemas']['ScheduledJob']
      meta?: Record<string, never>
    }
    ServiceArea: {
      /** Format: date-time */
      createdAt?: string
      createdBy?: {
        documentId?: string
        id?: number
      }
      documentId?: string
      id?: number
      locale?: string
      localizations?: {
        documentId?: string
        id?: number
      }[]
      name: string
      owner: string
      products?: {
        children?: {
          documentId?: string
          id?: number
        }[]
        components?: {
          api?: boolean
          app_insights_cloud_role_name?: string
          archived?: boolean
          codescanning_summary?: unknown
          container_image?: string
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          description?: string
          disabled_workflows?: unknown
          documentId?: string
          envs?: {
            active_agencies?: unknown
            alert_severity_label?: string
            alerts_slack_channel?: string
            build_image_tag?: string
            cluster?: string
            component?: {
              documentId?: string
              id?: number
            }
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            health_path?: string
            id?: number
            include_in_subject_access_requests?: boolean
            info_path?: string
            ip_allow_list?: unknown
            ip_allow_list_enabled?: boolean
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            manually_managed?: boolean
            modsecurity_audit_enabled?: boolean
            modsecurity_enabled?: boolean
            modsecurity_snippet?: string
            monitor?: boolean
            name?: string
            namespace?: string
            ns?: {
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                documentId?: string
                id?: number
              }
              documentId?: string
              elasticache_cluster?: components['schemas']['TfModulesElasticacheClusterComponent'][]
              hmpps_template?: components['schemas']['TfModulesHmppsTerraformTemplateComponent'][]
              id?: number
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              name?: string
              pingdom_check?: components['schemas']['TfModulesPingdomCheckComponent'][]
              /** Format: date-time */
              publishedAt?: string
              rds_instance?: components['schemas']['TfModulesRdsInstanceComponent'][]
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
            }
            pingdom_paused?: boolean
            pingdom_sre_managed?: boolean
            /** Format: date-time */
            publishedAt?: string
            swagger_docs?: string
            trivy_scan?: {
              build_image_tag?: string
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                documentId?: string
                id?: number
              }
              documentId?: string
              environments?: unknown
              id?: number
              image_id?: string
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              name?: string
              /** Format: date-time */
              publishedAt?: string
              /** @enum {string} */
              scan_status?: 'Failed' | 'Succeeded'
              scan_summary?: unknown
              trivy_scan_timestamp?: string
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
            }
            /** @enum {string} */
            type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
            url?: string
          }[]
          frontend?: boolean
          github_enforce_admins_enabled?: boolean
          github_only?: boolean
          github_project_branch_protection_restricted_teams?: unknown
          github_project_teams_admin?: unknown
          github_project_teams_maintain?: unknown
          github_project_teams_write?: unknown
          /** @enum {string} */
          github_project_visibility?: 'public' | 'internal' | 'private'
          github_repo?: string
          github_repo_is_template?: boolean
          github_template_repo?: string
          github_topics?: unknown
          id?: number
          jira_project_keys?: unknown
          language?: string
          latest_commit?: components['schemas']['PropertiesCommitComponent']
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          part_of_monorepo?: boolean
          path_to_helm_dir?: string
          path_to_project?: string
          product?: {
            documentId?: string
            id?: number
          }
          /** Format: date-time */
          publishedAt?: string
          slack_channel_nonprod_release_notify?: string
          slack_channel_prod_release_notify?: string
          slack_channel_security_scans_notify?: string
          standards_compliance?: unknown
          title?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
          veracode_exempt?: boolean
          veracode_last_completed_scan_date?: string
          veracode_policy_rules_status?: string
          veracode_results_summary?: unknown
          veracode_results_url?: string
          versions?: unknown
        }[]
        confluence_link?: string
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        delivery_manager?: string
        description?: string
        documentId?: string
        gdrive_link?: string
        id?: number
        lead_developer?: string
        legacy?: boolean
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        name?: string
        p_id?: string
        parent?: {
          documentId?: string
          id?: number
        }
        phase?: string
        product_manager?: string
        product_set?: {
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          documentId?: string
          id?: number
          lead_developer?: string
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          products?: {
            documentId?: string
            id?: number
          }[]
          ps_id?: string
          /** Format: date-time */
          publishedAt?: string
          slug?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
        }
        /** Format: date-time */
        publishedAt?: string
        service_area?: {
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          documentId?: string
          id?: number
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          owner?: string
          products?: {
            documentId?: string
            id?: number
          }[]
          /** Format: date-time */
          publishedAt?: string
          sa_id?: string
          slug?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
        }
        slack_channel_id?: string
        slack_channel_name?: string
        slug?: string
        subproduct?: boolean
        team?: {
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            blocked?: boolean
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            /** Format: email */
            email?: string
            firstname?: string
            id?: number
            isActive?: boolean
            lastname?: string
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            preferedLanguage?: string
            /** Format: date-time */
            publishedAt?: string
            registrationToken?: string
            resetPasswordToken?: string
            roles?: {
              code?: string
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                documentId?: string
                id?: number
              }
              description?: string
              documentId?: string
              id?: number
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              name?: string
              permissions?: {
                action?: string
                actionParameters?: unknown
                conditions?: unknown
                /** Format: date-time */
                createdAt?: string
                createdBy?: {
                  documentId?: string
                  id?: number
                }
                documentId?: string
                id?: number
                locale?: string
                localizations?: {
                  documentId?: string
                  id?: number
                }[]
                properties?: unknown
                /** Format: date-time */
                publishedAt?: string
                role?: {
                  documentId?: string
                  id?: number
                }
                subject?: string
                /** Format: date-time */
                updatedAt?: string
                updatedBy?: {
                  documentId?: string
                  id?: number
                }
              }[]
              /** Format: date-time */
              publishedAt?: string
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
              users?: {
                documentId?: string
                id?: number
              }[]
            }[]
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
            username?: string
          }
          documentId?: string
          id?: number
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          products?: {
            documentId?: string
            id?: number
          }[]
          /** Format: date-time */
          publishedAt?: string
          slack_channel_id?: string
          slack_channel_name?: string
          slug?: string
          t_id?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
        }
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
      }[]
      /** Format: date-time */
      publishedAt?: string
      sa_id: string
      slug?: string
      /** Format: date-time */
      updatedAt?: string
      updatedBy?: {
        documentId?: string
        id?: number
      }
    }
    ServiceAreaListResponse: {
      data?: components['schemas']['ServiceArea'][]
      meta?: {
        pagination?: {
          page?: number
          pageCount?: number
          pageSize?: number
          total?: number
        }
      }
    }
    ServiceAreaRequest: {
      data: {
        locale?: string
        localizations?: (number | string)[]
        name: string
        owner: string
        products?: (number | string)[]
        sa_id: string
        slug?: string
      }
    }
    ServiceAreaResponse: {
      data?: components['schemas']['ServiceArea']
      meta?: Record<string, never>
    }
    Team: {
      /** Format: date-time */
      createdAt?: string
      createdBy?: {
        documentId?: string
        id?: number
      }
      documentId?: string
      id?: number
      locale?: string
      localizations?: {
        documentId?: string
        id?: number
      }[]
      name: string
      products?: {
        children?: {
          documentId?: string
          id?: number
        }[]
        components?: {
          api?: boolean
          app_insights_cloud_role_name?: string
          archived?: boolean
          codescanning_summary?: unknown
          container_image?: string
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          description?: string
          disabled_workflows?: unknown
          documentId?: string
          envs?: {
            active_agencies?: unknown
            alert_severity_label?: string
            alerts_slack_channel?: string
            build_image_tag?: string
            cluster?: string
            component?: {
              documentId?: string
              id?: number
            }
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            health_path?: string
            id?: number
            include_in_subject_access_requests?: boolean
            info_path?: string
            ip_allow_list?: unknown
            ip_allow_list_enabled?: boolean
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            manually_managed?: boolean
            modsecurity_audit_enabled?: boolean
            modsecurity_enabled?: boolean
            modsecurity_snippet?: string
            monitor?: boolean
            name?: string
            namespace?: string
            ns?: {
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                documentId?: string
                id?: number
              }
              documentId?: string
              elasticache_cluster?: components['schemas']['TfModulesElasticacheClusterComponent'][]
              hmpps_template?: components['schemas']['TfModulesHmppsTerraformTemplateComponent'][]
              id?: number
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              name?: string
              pingdom_check?: components['schemas']['TfModulesPingdomCheckComponent'][]
              /** Format: date-time */
              publishedAt?: string
              rds_instance?: components['schemas']['TfModulesRdsInstanceComponent'][]
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
            }
            pingdom_paused?: boolean
            pingdom_sre_managed?: boolean
            /** Format: date-time */
            publishedAt?: string
            swagger_docs?: string
            trivy_scan?: {
              build_image_tag?: string
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                documentId?: string
                id?: number
              }
              documentId?: string
              environments?: unknown
              id?: number
              image_id?: string
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              name?: string
              /** Format: date-time */
              publishedAt?: string
              /** @enum {string} */
              scan_status?: 'Failed' | 'Succeeded'
              scan_summary?: unknown
              trivy_scan_timestamp?: string
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
            }
            /** @enum {string} */
            type?: 'dev' | 'test' | 'stage' | 'preprod' | 'prod'
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
            url?: string
          }[]
          frontend?: boolean
          github_enforce_admins_enabled?: boolean
          github_only?: boolean
          github_project_branch_protection_restricted_teams?: unknown
          github_project_teams_admin?: unknown
          github_project_teams_maintain?: unknown
          github_project_teams_write?: unknown
          /** @enum {string} */
          github_project_visibility?: 'public' | 'internal' | 'private'
          github_repo?: string
          github_repo_is_template?: boolean
          github_template_repo?: string
          github_topics?: unknown
          id?: number
          jira_project_keys?: unknown
          language?: string
          latest_commit?: components['schemas']['PropertiesCommitComponent']
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          part_of_monorepo?: boolean
          path_to_helm_dir?: string
          path_to_project?: string
          product?: {
            documentId?: string
            id?: number
          }
          /** Format: date-time */
          publishedAt?: string
          slack_channel_nonprod_release_notify?: string
          slack_channel_prod_release_notify?: string
          slack_channel_security_scans_notify?: string
          standards_compliance?: unknown
          title?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
          veracode_exempt?: boolean
          veracode_last_completed_scan_date?: string
          veracode_policy_rules_status?: string
          veracode_results_summary?: unknown
          veracode_results_url?: string
          versions?: unknown
        }[]
        confluence_link?: string
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        delivery_manager?: string
        description?: string
        documentId?: string
        gdrive_link?: string
        id?: number
        lead_developer?: string
        legacy?: boolean
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        name?: string
        p_id?: string
        parent?: {
          documentId?: string
          id?: number
        }
        phase?: string
        product_manager?: string
        product_set?: {
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          documentId?: string
          id?: number
          lead_developer?: string
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          products?: {
            documentId?: string
            id?: number
          }[]
          ps_id?: string
          /** Format: date-time */
          publishedAt?: string
          slug?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
        }
        /** Format: date-time */
        publishedAt?: string
        service_area?: {
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          documentId?: string
          id?: number
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          owner?: string
          products?: {
            documentId?: string
            id?: number
          }[]
          /** Format: date-time */
          publishedAt?: string
          sa_id?: string
          slug?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
        }
        slack_channel_id?: string
        slack_channel_name?: string
        slug?: string
        subproduct?: boolean
        team?: {
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            blocked?: boolean
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            /** Format: email */
            email?: string
            firstname?: string
            id?: number
            isActive?: boolean
            lastname?: string
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            preferedLanguage?: string
            /** Format: date-time */
            publishedAt?: string
            registrationToken?: string
            resetPasswordToken?: string
            roles?: {
              code?: string
              /** Format: date-time */
              createdAt?: string
              createdBy?: {
                documentId?: string
                id?: number
              }
              description?: string
              documentId?: string
              id?: number
              locale?: string
              localizations?: {
                documentId?: string
                id?: number
              }[]
              name?: string
              permissions?: {
                action?: string
                actionParameters?: unknown
                conditions?: unknown
                /** Format: date-time */
                createdAt?: string
                createdBy?: {
                  documentId?: string
                  id?: number
                }
                documentId?: string
                id?: number
                locale?: string
                localizations?: {
                  documentId?: string
                  id?: number
                }[]
                properties?: unknown
                /** Format: date-time */
                publishedAt?: string
                role?: {
                  documentId?: string
                  id?: number
                }
                subject?: string
                /** Format: date-time */
                updatedAt?: string
                updatedBy?: {
                  documentId?: string
                  id?: number
                }
              }[]
              /** Format: date-time */
              publishedAt?: string
              /** Format: date-time */
              updatedAt?: string
              updatedBy?: {
                documentId?: string
                id?: number
              }
              users?: {
                documentId?: string
                id?: number
              }[]
            }[]
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
            username?: string
          }
          documentId?: string
          id?: number
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          products?: {
            documentId?: string
            id?: number
          }[]
          /** Format: date-time */
          publishedAt?: string
          slack_channel_id?: string
          slack_channel_name?: string
          slug?: string
          t_id?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
        }
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
      }[]
      /** Format: date-time */
      publishedAt?: string
      slack_channel_id?: string
      slack_channel_name?: string
      slug?: string
      t_id: string
      /** Format: date-time */
      updatedAt?: string
      updatedBy?: {
        documentId?: string
        id?: number
      }
    }
    TeamListResponse: {
      data?: components['schemas']['Team'][]
      meta?: {
        pagination?: {
          page?: number
          pageCount?: number
          pageSize?: number
          total?: number
        }
      }
    }
    TeamRequest: {
      data: {
        locale?: string
        localizations?: (number | string)[]
        name: string
        products?: (number | string)[]
        slack_channel_id?: string
        slack_channel_name?: string
        slug?: string
        t_id: string
      }
    }
    TeamResponse: {
      data?: components['schemas']['Team']
      meta?: Record<string, never>
    }
    TfModulesElasticacheClusterComponent: {
      application?: string
      business_unit?: string
      engine_version?: string
      environment_name?: string
      id?: number
      infrastructure_support?: string
      is_production?: boolean
      namespace?: string
      node_type?: string
      number_cache_clusters?: number
      parameter_group_name?: string
      team_name?: string
      tf_filename?: string
      tf_label?: string
      tf_line_end?: number
      tf_line_start?: number
      tf_mod_version?: string
      tf_path?: string
    }
    TfModulesHmppsTerraformTemplateComponent: {
      application?: string
      application_insights_instance?: string
      environment_name?: string
      github_repo?: string
      github_team_name?: string
      id?: number
      is_production?: boolean
      namespace?: string
      prevent_self_review?: boolean
      protected_branches_only?: boolean
      reviewer_teams?: unknown
      selected_branch_patterns?: unknown
      source_template_repo?: string
      tf_filename?: string
      tf_label?: string
      tf_line_end?: number
      tf_line_start?: number
      tf_mod_version?: string
      tf_path?: string
    }
    TfModulesPingdomCheckComponent: {
      encryption?: boolean
      host?: string
      id?: number
      integrationids?: unknown
      name?: string
      notifyagainevery?: number
      notifywhenbackup?: boolean
      port?: number
      probefilters?: string
      resolution?: number
      sendnotificationwhendown?: number
      tf_filename?: string
      tf_label?: string
      tf_line_end?: number
      tf_line_start?: number
      tf_path?: string
      type?: string
      url?: string
    }
    TfModulesRdsInstanceComponent: {
      allow_major_version_upgrade?: boolean
      allow_minor_version_upgrade?: boolean
      application?: string
      backup_window?: string
      business_unit?: string
      db_engine_version?: string
      db_instance_class?: string
      db_max_allocated_storage?: string
      db_parameter?: unknown
      deletion_protection?: boolean
      environment_name?: string
      id?: number
      infrastructure_support?: string
      is_production?: string
      maintenance_window?: string
      namespace?: string
      performance_insights_enabled?: boolean
      rds_family?: string
      team_name?: string
      tf_filename?: string
      tf_label?: string
      tf_line_end?: number
      tf_line_start?: number
      tf_mod_version?: string
      tf_path?: string
    }
    TrivyScan: {
      build_image_tag?: string
      /** Format: date-time */
      createdAt?: string
      createdBy?: {
        blocked?: boolean
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        documentId?: string
        /** Format: email */
        email?: string
        firstname?: string
        id?: number
        isActive?: boolean
        lastname?: string
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        preferedLanguage?: string
        /** Format: date-time */
        publishedAt?: string
        registrationToken?: string
        resetPasswordToken?: string
        roles?: {
          code?: string
          /** Format: date-time */
          createdAt?: string
          createdBy?: {
            documentId?: string
            id?: number
          }
          description?: string
          documentId?: string
          id?: number
          locale?: string
          localizations?: {
            documentId?: string
            id?: number
          }[]
          name?: string
          permissions?: {
            action?: string
            actionParameters?: unknown
            conditions?: unknown
            /** Format: date-time */
            createdAt?: string
            createdBy?: {
              documentId?: string
              id?: number
            }
            documentId?: string
            id?: number
            locale?: string
            localizations?: {
              documentId?: string
              id?: number
            }[]
            properties?: unknown
            /** Format: date-time */
            publishedAt?: string
            role?: {
              documentId?: string
              id?: number
            }
            subject?: string
            /** Format: date-time */
            updatedAt?: string
            updatedBy?: {
              documentId?: string
              id?: number
            }
          }[]
          /** Format: date-time */
          publishedAt?: string
          /** Format: date-time */
          updatedAt?: string
          updatedBy?: {
            documentId?: string
            id?: number
          }
          users?: {
            documentId?: string
            id?: number
          }[]
        }[]
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
        username?: string
      }
      documentId?: string
      environments?: unknown
      id?: number
      image_id?: string
      locale?: string
      localizations?: {
        build_image_tag?: string
        /** Format: date-time */
        createdAt?: string
        createdBy?: {
          documentId?: string
          id?: number
        }
        documentId?: string
        environments?: unknown
        id?: number
        image_id?: string
        locale?: string
        localizations?: {
          documentId?: string
          id?: number
        }[]
        name?: string
        /** Format: date-time */
        publishedAt?: string
        /** @enum {string} */
        scan_status?: 'Failed' | 'Succeeded'
        scan_summary?: unknown
        trivy_scan_timestamp?: string
        /** Format: date-time */
        updatedAt?: string
        updatedBy?: {
          documentId?: string
          id?: number
        }
      }[]
      name?: string
      /** Format: date-time */
      publishedAt?: string
      /** @enum {string} */
      scan_status?: 'Failed' | 'Succeeded'
      scan_summary?: unknown
      trivy_scan_timestamp?: string
      /** Format: date-time */
      updatedAt?: string
      updatedBy?: {
        documentId?: string
        id?: number
      }
    }
    TrivyScanListResponse: {
      data?: components['schemas']['TrivyScan'][]
      meta?: {
        pagination?: {
          page?: number
          pageCount?: number
          pageSize?: number
          total?: number
        }
      }
    }
    TrivyScanRequest: {
      data: {
        build_image_tag?: string
        environments?: unknown
        image_id?: string
        locale?: string
        localizations?: (number | string)[]
        name?: string
        /** @enum {string} */
        scan_status?: 'Failed' | 'Succeeded'
        scan_summary?: unknown
        trivy_scan_timestamp?: string
      }
    }
    TrivyScanResponse: {
      data?: components['schemas']['TrivyScan']
      meta?: Record<string, never>
    }
    UploadFile: {
      alternativeText?: string
      caption?: string
      /** Format: date-time */
      createdAt?: string
      ext?: string
      formats?: number
      hash?: string
      /** Format: integer */
      height?: number
      id?: number
      mime?: string
      name?: string
      previewUrl?: string
      provider?: string
      provider_metadata?: Record<string, never>
      /** Format: double */
      size?: number
      /** Format: date-time */
      updatedAt?: string
      url?: string
      /** Format: integer */
      width?: number
    }
    'Users-Permissions-PermissionsTree': {
      [key: string]: {
        /** @description every controller of the api */
        controllers?: {
          [key: string]: {
            [key: string]: {
              enabled?: boolean
              policy?: string
            }
          }
        }
      }
    }
    'Users-Permissions-Role': {
      /** Format: date-time */
      createdAt?: string
      description?: string
      id?: number
      name?: string
      type?: string
      /** Format: date-time */
      updatedAt?: string
    }
    'Users-Permissions-User': {
      /** @example false */
      blocked?: boolean
      /** @example true */
      confirmed?: boolean
      /**
       * Format: date-time
       * @example 2022-06-02T08:32:06.258Z
       */
      createdAt?: string
      /** @example foo.bar@strapi.io */
      email?: string
      /** @example 1 */
      id?: number
      /** @example local */
      provider?: string
      /**
       * Format: date-time
       * @example 2022-06-02T08:32:06.267Z
       */
      updatedAt?: string
      /** @example foo.bar */
      username?: string
    }
    'Users-Permissions-UserRegistration': {
      jwt?: string
      user?: components['schemas']['Users-Permissions-User']
    }
  }
  responses: never
  parameters: never
  requestBodies: {
    'Users-Permissions-RoleRequest': {
      content: {
        /** @example {
         *       "name": "foo",
         *       "description": "role foo",
         *       "permissions": {
         *         "api::content-type.content-type": {
         *           "controllers": {
         *             "controllerA": {
         *               "find": {
         *                 "enabled": true
         *               }
         *             }
         *           }
         *         }
         *       }
         *     } */
        'application/json': {
          description?: string
          name?: string
          permissions?: components['schemas']['Users-Permissions-PermissionsTree']
          type?: string
        }
      }
    }
  }
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  'get/components': {
    parameters: {
      query?: {
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Relations to return */
        populate?: string
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComponentListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/components': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ComponentRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComponentResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/components/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComponentResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/components/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ComponentRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComponentResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/components/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/cp-namespace-requests': {
    parameters: {
      query?: {
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Relations to return */
        populate?: string
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CpNamespaceRequestListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/cp-namespace-requests': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CpNamespaceRequestRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CpNamespaceRequestResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/cp-namespace-requests/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CpNamespaceRequestResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/cp-namespace-requests/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CpNamespaceRequestRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CpNamespaceRequestResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/cp-namespace-requests/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/custom-component-views': {
    parameters: {
      query?: {
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Relations to return */
        populate?: string
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CustomComponentViewListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/custom-component-views': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CustomComponentViewRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CustomComponentViewResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/custom-component-views/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CustomComponentViewResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/custom-component-views/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CustomComponentViewRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CustomComponentViewResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/custom-component-views/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/environments': {
    parameters: {
      query?: {
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Relations to return */
        populate?: string
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EnvironmentListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/environments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EnvironmentRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EnvironmentResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/environments/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EnvironmentResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/environments/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EnvironmentRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EnvironmentResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/environments/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/github-repo-requests': {
    parameters: {
      query?: {
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Relations to return */
        populate?: string
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GithubRepoRequestListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/github-repo-requests': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GithubRepoRequestRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GithubRepoRequestResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/github-repo-requests/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GithubRepoRequestResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/github-repo-requests/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GithubRepoRequestRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GithubRepoRequestResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/github-repo-requests/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/github-teams': {
    parameters: {
      query?: {
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Relations to return */
        populate?: string
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GithubTeamListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/github-teams': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GithubTeamRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GithubTeamResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/github-teams/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GithubTeamResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/github-teams/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GithubTeamRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GithubTeamResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/github-teams/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/namespaces': {
    parameters: {
      query?: {
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Relations to return */
        populate?: string
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NamespaceListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/namespaces': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NamespaceRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NamespaceResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/namespaces/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NamespaceResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/namespaces/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NamespaceRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NamespaceResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/namespaces/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/product-sets': {
    parameters: {
      query?: {
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Relations to return */
        populate?: string
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductSetListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/product-sets': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProductSetRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductSetResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/product-sets/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductSetResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/product-sets/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProductSetRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductSetResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/product-sets/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/products': {
    parameters: {
      query?: {
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Relations to return */
        populate?: string
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/products': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProductRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/products/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/products/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProductRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProductResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/products/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/recommended-versions': {
    parameters: {
      query?: {
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Relations to return */
        populate?: string
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RecommendedVersionListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/recommended-versions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RecommendedVersionRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RecommendedVersionResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/recommended-versions/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RecommendedVersionResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/recommended-versions/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RecommendedVersionRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RecommendedVersionResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/recommended-versions/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/scheduled-jobs': {
    parameters: {
      query?: {
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Relations to return */
        populate?: string
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledJobListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/scheduled-jobs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ScheduledJobRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledJobResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/scheduled-jobs/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledJobResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/scheduled-jobs/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ScheduledJobRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledJobResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/scheduled-jobs/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/service-areas': {
    parameters: {
      query?: {
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Relations to return */
        populate?: string
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceAreaListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/service-areas': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ServiceAreaRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceAreaResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/service-areas/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceAreaResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/service-areas/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ServiceAreaRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceAreaResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/service-areas/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/teams': {
    parameters: {
      query?: {
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Relations to return */
        populate?: string
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TeamListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/teams': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TeamResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/teams/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TeamResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/teams/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TeamResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/teams/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/trivy-scans': {
    parameters: {
      query?: {
        /** @description Fields to return (ex: title,author) */
        fields?: string
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown
        }
        /** @description Locale to apply */
        locale?: string
        /** @description Number of entities to return (default: 25) */
        'pagination[limit]'?: number
        /** @description Page number (default: 0) */
        'pagination[page]'?: number
        /** @description Page size (default: 25) */
        'pagination[pageSize]'?: number
        /** @description Offset value (default: 0) */
        'pagination[start]'?: number
        /** @description Return page/pageSize (default: true) */
        'pagination[withCount]'?: boolean
        /** @description Relations to return */
        populate?: string
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TrivyScanListResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'post/trivy-scans': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TrivyScanRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TrivyScanResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'get/trivy-scans/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TrivyScanResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'put/trivy-scans/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TrivyScanRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TrivyScanResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  'delete/trivy-scans/{id}': {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
}
